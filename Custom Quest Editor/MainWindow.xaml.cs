using Custom_Quest_Editor.Crypto;
using Microsoft.Win32;
using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Reflection;

namespace Custom_Quest_Editor
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public UInt64 Inspectingint32 = 0;
        public Int16 Inspectingbyte = 0;
        public Int32[] MapIDs = {100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 200, 201, 202, 203, 301, 302, 303, 305,306,307, 311, 400, 401, 403, 405, 406, 407, 408, 409,410,411,412,413,414, 415,416, 417, 501, 502, 503, 504, 505,506};
        public Int32[] ForbiddenMapIDs = { 108, 109,203, 305, 306, 307, 311, 410, 411, 412, 413, 414, 415,416, 417, 506 };
        public byte[] ObjectiveIDs = { 0x00, 0x01, 0x02, 0x11, 0x21, 0x31 };
        public byte[] QuestTypeIDs = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20 };

        #region Strings
        public string[] Items = {"--------" ,
"Potion" ,
"Mega Potion" ,
"Max Potion" ,
"Ancient Potion" ,
"Antidote" ,
"Herbal Medicine" ,
"Nulberry" ,
"Energy Drink" ,
"Ration" ,
"Rare Steak" ,
"Well-done Steak" ,
"Burnt Meat" ,
"Cool Drink" ,
"Nutrients" ,
"Mega Nutrients" ,
"Immunizer" ,
"Astera Jerky" ,
"Dash Juice" ,
"Mega Dash Juice" ,
"Might Seed" ,
"Demondrug" ,
"Mega Demondrug" ,
"Might Pill" ,
"Adamant Seed" ,
"Armorskin" ,
"Mega Armorskin" ,
"Adamant Pill" ,
"Lifepowder" ,
"Herbal Powder" ,
"Demon Powder" ,
"Hardshell Powder" ,
"Honey" ,
"Herb" ,
"Antidote Herb" ,
"Fire Herb" ,
"Flowfern" ,
"Snow Herb" ,
"Sleep Herb" ,
"Ivy" ,
"Smokenut" ,
"Dragonfell Berry" ,
"Blue Mushroom" ,
"Mandragora" ,
"Nitroshroom" ,
"Devil's Blight" ,
"Parashroom" ,
"Toadstool" ,
"Exciteshroom" ,
"Bitterbug" ,
"Flashbug" ,
"Godbug" ,
"Thunderbug" ,
"Baitbug" ,
"Kelbi Horn" ,
"Dash Extract" ,
"Nourishing Extract" ,
"Screamer Sac" ,
"Catalyst" ,
"Tranq Bomb" ,
"Flash Pod" ,
"Screamer Pod" ,
"Smoke Bomb" ,
"Poison Smoke Bomb" ,
"Farcaster" ,
"Raw Meat" ,
"Poisoned Meat" ,
"Tinged Meat" ,
"Drugged Meat" ,
"Gunpowder" ,
"Small Barrel" ,
"Barrel Bomb" ,
"Bounce Bomb" ,
"Mega Bounce Bomb" ,
"Large Barrel" ,
"Large Barrel Bomb" ,
"Mega Barrel Bomb" ,
"Spider Web" ,
"Net" ,
"Trap Tool" ,
"Pitfall Trap" ,
"Shock Trap" ,
"Rolled-up Dung" ,
"Dung" ,
"Dung Pod" ,
"Arowana Bait" ,
"Gunpowderfish Bait" ,
"Goldenfish Bait" ,
"Boomerang" ,
"Binoculars" ,
"Powercharm" ,
"Powertalon" ,
"Armorcharm" ,
"Armortalon" ,
"Needleberry" ,
"Blastnut" ,
"Dragonstrike Nut" ,
"Slashberry" ,
"Latchberry" ,
"Bomberry" ,
"Flamenut" ,
"Blazenut" ,
"Gunpowder Level 2" ,
"Gunpowder Level 3" ,
"Whetfish Fin" ,
"Whetfish Fin+" ,
"Sushifish Scale" ,
"Great Sushifish Scale" ,
"Gunpowderfish Scale" ,
"Great Gunpowderfish Scale" ,
"Burst Arowana Scale" ,
"Great Burst Arowana Scale" ,
"Bomb Arowana Scale" ,
"Great Bomb Arowana Scale" ,
"Whetstone" ,
"Capture Net" ,
"Fishing Rod" ,
"BBQ Spit" ,
"Ghillie Mantle" ,
"Temporal Mantle" ,
"Health Booster" ,
"Rocksteady Mantle" ,
"Challenger Mantle" ,
"Vitality Mantle" ,
"Fireproof Mantle" ,
"Waterproof Mantle" ,
"Iceproof Mantle" ,
"Thunderproof Mantle" ,
"Dragonproof Mantle" ,
"Cleanser Booster" ,
"Glider Mantle" ,
"Evasion Mantle" ,
"Impact Mantle" ,
"Apothecary Mantle" ,
"Immunity Mantle" ,
"Affinity Booster" ,
"Bandit Mantle" ,
"Normal Ammo 1" ,
"Normal Ammo 2" ,
"Normal Ammo 3" ,
"Pierce Ammo 1" ,
"Pierce Ammo 2" ,
"Pierce Ammo 3" ,
"Spread Ammo 1" ,
"Spread Ammo 2" ,
"Spread Ammo 3" ,
"Sticky Ammo 1" ,
"Sticky Ammo 2" ,
"Sticky Ammo 3" ,
"Cluster Bomb 1" ,
"Cluster Bomb 2" ,
"Cluster Bomb 3" ,
"Flaming Ammo" ,
"Water Ammo" ,
"Thunder Ammo" ,
"Freeze Ammo" ,
"Dragon Ammo" ,
"Poison Ammo 1" ,
"Poison Ammo 2" ,
"Paralysis Ammo 1" ,
"Paralysis Ammo 2" ,
"Sleep Ammo 1" ,
"Sleep Ammo 2" ,
"Exhaust Ammo 1" ,
"Exhaust Ammo 2" ,
"Recover Ammo 1" ,
"Recover Ammo 2" ,
"Wyvern Ammo" ,
"Slicing Ammo" ,
"Tranq Ammo" ,
"Demon Ammo" ,
"Armor Ammo" ,
"(None)" ,
"Close-range Coating" ,
"Empty Phial" ,
"Power Coating" ,
"Poison Coating" ,
"Paralysis Coating" ,
"Sleep Coating" ,
"Exhaust Coating" ,
"Blast Coating" ,
"First-aid Med" ,
"First-aid Med+" ,
"EZ Ration" ,
"EZ Lifepowder" ,
"EZ Max Potion" ,
"EZ Large Barrel Bomb" ,
"EZ Shock Trap" ,
"EZ Pitfall Trap" ,
"EZ Herbal Powder" ,
"EZ Demon Powder" ,
"EZ Hardshell Powder" ,
"EZ Dung Pod" ,
"EZ Flash Pod" ,
"EZ Screamer Pod" ,
"Throwing Knife" ,
"Poison Knife" ,
"Sleep Knife" ,
"Paralysis Knife" ,
"Tranq Knife" ,
"EZ Farcaster" ,
"EZ Tranq Bomb" ,
"Ballista Ammo" ,
"One-shot Binder" ,
"Cannon Ammo" ,
"Iron Ore" ,
"Machalite Ore" ,
"Dragonite Ore" ,
"Carbalite Ore" ,
"Fucium Ore" ,
"Earth Crystal" ,
"Coral Crystal" ,
"Dragonvein Crystal" ,
"Lightcrystal" ,
"Novacrystal" ,
"Firecell Stone" ,
"Aquacore Ore" ,
"Spiritcore Ore" ,
"Dreamcore Ore" ,
"Dragoncore Ore" ,
"Armor Sphere" ,
"Armor Sphere+" ,
"Advanced Armor Sphere" ,
"Hard Armor Sphere" ,
"Heavy Armor Sphere" ,
"Sturdy Bone" ,
"Quality Bone" ,
"Ancient Bone" ,
"Boulder Bone" ,
"Coral Bone" ,
"Warped Bone" ,
"Brutal Bone" ,
"Dragonbone Relic" ,
"Unknown Skull" ,
"Great Hornfly" ,
"Sinister Cloth" ,
"Monster Bone S" ,
"Monster Bone M" ,
"Monster Bone L" ,
"Monster Bone+" ,
"Monster Keenbone" ,
"Monster Hardbone" ,
"Elder Dragon Bone" ,
"Sharp Claw" ,
"Piercing Claw" ,
"Monster Fluid" ,
"Monster Broth" ,
"Poison Sac" ,
"Toxin Sac" ,
"Paralysis Sac" ,
"Omniplegia Sac" ,
"Sleep Sac" ,
"Coma Sac" ,
"Flame Sac" ,
"Inferno Sac" ,
"Aqua Sac" ,
"Torrent Sac" ,
"Frost Sac" ,
"Freezer Sac" ,
"Electro Sac" ,
"Thunder Sac" ,
"Bird Wyvern Gem" ,
"Wyvern Gem" ,
"Elder Dragon Blood" ,
"Mosswine Hide" ,
"Warm Pelt" ,
"High-quality Pelt" ,
"Vespoid Shell" ,
"Vespoid Carapace" ,
"Vespoid Wing" ,
"Vespoid Innerwing" ,
"Hornetaur Shell" ,
"Hornetaur Wing" ,
"Hornetaur Head" ,
"Hornetaur Carapace" ,
"Hornetaur Innerwing" ,
"Gajau Skin" ,
"Gajau Whisker" ,
"Gajau Scale" ,
"Grand Gajau Whisker" ,
"Wingdrake Hide" ,
"Wingdrake Hide+" ,
"Barnos Hide+" ,
"Barnos Talon" ,
"Kestodon Shell" ,
"Kestodon Scalp" ,
"Kestodon Carapace" ,
"Gastodon Carapace" ,
"Gastodon Horn" ,
"Jagras Scale" ,
"Jagras Hide" ,
"Jagras Scale+" ,
"Jagras Hide+" ,
"Shamos Scale" ,
"Shamos Hide" ,
"Shamos Scale+" ,
"Shamos Hide+" ,
"Girros Scale" ,
"Girros Hide" ,
"Girros Fang" ,
"Girros Scale+" ,
"Girros Hide+" ,
"Great Jagras Scale" ,
"Great Jagras Hide" ,
"Great Jagras Mane" ,
"Great Jagras Claw" ,
"Great Jagras Scale+" ,
"Great Jagras Hide+" ,
"Great Jagras Claw+" ,
"Kulu-Ya-Ku Scale" ,
"Kulu-Ya-Ku Hide" ,
"Kulu-Ya-Ku Plume" ,
"Kulu-Ya-Ku Beak" ,
"Kulu-Ya-Ku Scale+" ,
"Kulu-Ya-Ku Hide+" ,
"Kulu-Ya-Ku Plume+" ,
"Kulu-Ya-Ku Beak+" ,
"Pukei-Pukei Scale" ,
"Pukei-Pukei Shell" ,
"Pukei-Pukei Quill" ,
"Pukei-Pukei Sac" ,
"Pukei-Pukei Tail" ,
"Pukei-Pukei Scale+" ,
"Pukei-Pukei Carapace" ,
"Pukei-Pukei Wing" ,
"Pukei-Pukei Sac+" ,
"Barroth Shell" ,
"Barroth Ridge" ,
"Barroth Claw" ,
"Barroth Scalp" ,
"Barroth Tail" ,
"Fertile Mud" ,
"Barroth Carapace" ,
"Barroth Ridge+" ,
"Barroth Claw+" ,
"Jyuratodus Scale" ,
"Jyuratodus Shell" ,
"Jyuratodus Fang" ,
"Jyuratodus Fin" ,
"Jyuratodus Scale+" ,
"Jyuratodus Carapace" ,
"Jyuratodus Fang+" ,
"Jyuratodus Fin+" ,
"Tobi-Kadachi Scale" ,
"Tobi-Kadachi Pelt" ,
"Tobi-Kadachi Membrane" ,
"Tobi-Kadachi Claw" ,
"Tobi-Kadachi Electrode" ,
"Tobi-Kadachi Scale+" ,
"Tobi-Kadachi Pelt+" ,
"Tobi-Kadachi Claw+" ,
"Tobi-Kadachi Electrode+" ,
"Anjanath Scale" ,
"Anjanath Pelt" ,
"Anjanath Fang" ,
"Anjanath Nosebone" ,
"Anjanath Tail" ,
"Anjanath Plate" ,
"Anjanath Scale+" ,
"Anjanath Pelt+" ,
"Anjanath Fang+" ,
"Anjanath Nosebone+" ,
"Anjanath Gem" ,
"Rathian Scale" ,
"Rathian Shell" ,
"Rathian Webbing" ,
"Rathian Spike" ,
"Rathian Plate" ,
"Rathian Scale+" ,
"Rathian Carapace" ,
"Rathian Spike+" ,
"Rathian Ruby" ,
"Pink Rathian Scale+" ,
"Pink Rathian Carapace" ,
"Tzitzi-Ya-Ku Scale" ,
"Tzitzi-Ya-Ku Hide" ,
"Tzitzi-Ya-Ku Claw" ,
"Tzitzi-Ya-Ku Photophore" ,
"Tzitzi-Ya-Ku Scale+" ,
"Tzitzi-Ya-Ku Hide+" ,
"Tzitzi-Ya-Ku Claw+" ,
"Tzitzi-Ya-Ku Photophore+" ,
"Paolumu Pelt" ,
"Paolumu Scale" ,
"Paolumu Shell" ,
"Paolumu Webbing" ,
"Paolumu Pelt+" ,
"Paolumu Scale+" ,
"Paolumu Carapace+" ,
"Paolumu Wing" ,
"Great Girros Scale" ,
"Great Girros Hide" ,
"Great Girros Hood" ,
"Great Girros Fang" ,
"Great Girros Tail" ,
"Great Girros Scale+" ,
"Great Girros Hide+" ,
"Great Girros Hood+" ,
"Great Girros Fang+" ,
"Radobaan Scale" ,
"Radobaan Shell" ,
"Radobaan Oilshell" ,
"Wyvern Bonemass" ,
"Unavailable" ,
"Radobaan Marrow" ,
"Radobaan Scale+" ,
"Radobaan Carapace" ,
"Radobaan Medulla" ,
"Legiana Scale" ,
"Legiana Hide" ,
"Legiana Claw" ,
"Legiana Webbing" ,
"Legiana Tail Webbing" ,
"Legiana Plate" ,
"Legiana Scale+" ,
"Legiana Hide+" ,
"Legiana Claw+" ,
"Legiana Wing" ,
"Legiana Gem" ,
"Odogaron Scale" ,
"Odogaron Sinew" ,
"Odogaron Claw" ,
"Odogaron Fang" ,
"Odogaron Tail" ,
"Odogaron Plate" ,
"Odogaron Scale+" ,
"Odogaron Sinew+" ,
"Odogaron Claw+" ,
"Odogaron Fang+" ,
"Odogaron Gem" ,
"Rathalos Scale" ,
"Rathalos Shell" ,
"Rathalos Webbing" ,
"Rathalos Tail" ,
"Rath Wingtalon" ,
"Rathalos Marrow" ,
"Rathalos Plate" ,
"Rathalos Scale+" ,
"Rathalos Carapace" ,
"Rathalos Wing" ,
"Rathalos Medulla" ,
"Rathalos Ruby" ,
"Azure Rathalos Scale+" ,
"Azure Rathalos Carapace" ,
"Azure Rathalos Tail" ,
"Azure Rathalos Wing" ,
"Diablos Shell" ,
"Diablos Ridge" ,
"Diablos Tailcase" ,
"Diablos Fang" ,
"Twisted Horn" ,
"Diablos Marrow" ,
"Diablos Carapace" ,
"Diablos Ridge+" ,
"Majestic Horn" ,
"Blos Medulla" ,
"Black Diablos Carapace" ,
"Black Diablos Ridge+" ,
"Black Spiral Horn+" ,
"Kirin Hide" ,
"Kirin Tail" ,
"Kirin Mane" ,
"Kirin Thunderhorn" ,
"Kirin Hide+" ,
"Kirin Thundertail" ,
"Kirin Azure Horn" ,
"Unavailable" ,
"Zorah Magdaros Heat Scale" ,
"Zorah Magdaros Carapace" ,
"Zorah Magdaros Ridge" ,
"Zorah Magdaros Pleura" ,
"Unavailable" ,
"Zorah Magdaros Magma" ,
"Zorah Magdaros Gem" ,
"Dodogama Scale+" ,
"Dodogama Hide+" ,
"Dodogama Jaw" ,
"Dodogama Talon" ,
"Dodogama Tail" ,
"Lavasioth Scale+" ,
"Lavasioth Carapace" ,
"Lavasioth Fang+" ,
"Lavasioth Fin+" ,
"Uragaan Scale+" ,
"Uragaan Carapace" ,
"Uragaan Jaw" ,
"Uragaan Scute" ,
"Uragaan Marrow" ,
"Uragaan Ruby" ,
"Lava Nugget" ,
"Bazelgeuse Scale+" ,
"Bazelgeuse Carapace" ,
"Bazelgeuse Tail" ,
"Bazelgeuse Fuse" ,
"Bazelgeuse Talon" ,
"Bazelgeuse Wing" ,
"Bazelgeuse Gem" ,
"Immortal Dragonscale" ,
"Nergigante Carapace" ,
"Unavailable" ,
"Nergigante Tail" ,
"Nergigante Horn+" ,
"Nergigante Talon" ,
"Nergigante Regrowth Plate" ,
"Nergigante Gem" ,
"Deceased Scale" ,
"Vaal Hazak Carapace" ,
"Vaal Hazak Membrane" ,
"Vaal Hazak Tail" ,
"Vaal Hazak Fang+" ,
"Vaal Hazak Talon" ,
"Vaal Hazak Wing" ,
"Unavailable" ,
"Vaal Hazak Gem" ,
"Teostra Carapace" ,
"Teostra Mane" ,
"Teostra Tail" ,
"Teostra Horn+" ,
"Fire Dragon Scale+" ,
"Teostra Claw+" ,
"Teostra Webbing" ,
"Teostra Powder" ,
"Teostra Gem" ,
"Daora Carapace" ,
"Daora Dragon Scale+" ,
"Daora Webbing" ,
"Daora Horn+" ,
"Daora Tail" ,
"Daora Claw+" ,
"Daora Gem" ,
"Xeno'jiiva Soulscale" ,
"Xeno'jiiva Shell" ,
"Xeno'jiiva Veil" ,
"Xeno'jiiva Tail" ,
"Xeno'jiiva Horn" ,
"Xeno'jiiva Claw" ,
"Xeno'jiiva Wing" ,
"Unavailable" ,
"Xeno'jiiva Gem" ,
"??? Scale" ,
"??? Shell" ,
"??? Membrane" ,
"??? Tail" ,
"??? Horn" ,
"??? Claw" ,
"??? Wing" ,
"??? Crystal" ,
"??? Gem" ,
"Mysterious Feystone" ,
"Glowing Feystone" ,
"Worn Feystone" ,
"Warped Feystone" ,
"Sullied Streamstone" ,
"Shining Streamstone" ,
"Streamstone Shard" ,
"Streamstone" ,
"Gleaming Streamstone" ,
"Warrior's Streamstone: Sword" ,
"Warrior's Streamstone: Blade" ,
"Warrior's Streamstone: Hammer" ,
"Warrior's Streamstone: Lance" ,
"Warrior's Streamstone: Axe" ,
"Warrior's Streamstone: Shaft" ,
"Warrior's Streamstone: Ranged" ,
"Hero's Streamstone: Sword" ,
"Hero's Streamstone: Blade" ,
"Hero's Streamstone: Hammer" ,
"Hero's Streamstone: Lance" ,
"Hero's Streamstone: Axe" ,
"Hero's Streamstone: Shaft" ,
"Hero's Streamstone: Ranged" ,
"Voucher" ,
"First Wyverian Print" ,
"Deluxe First Wyverian Print" ,
"Steel Wyverian Print" ,
"Silver Wyverian Print" ,
"Gold Wyverian Print" ,
"Commendation" ,
"High Commendation" ,
"Research Commission Ticket" ,
"Pukei Coin" ,
"Kulu Coin" ,
"Rathian Coin" ,
"Tzitzi Coin" ,
"Barroth Coin" ,
"Gama Coin" ,
"Rathalos Coin" ,
"Brute Coin" ,
"Flying Coin" ,
"Pinnacle Coin" ,
"Hunter King Coin" ,
"Ace Hunter Coin" ,
"Steel Egg" ,
"Silver Egg" ,
"Golden Egg" ,
"Chipped Scale" ,
"Large Scale" ,
"Beautiful Scale" ,
"Lustrous Scale" ,
"Glimmering Scale" ,
"Bhernastone" ,
"Dundormarin" ,
"Loc Lac Ore" ,
"Val Habar Quartz" ,
"Minegardenite" ,
"Golden Scale" ,
"Golden Scale+" ,
"Platinum Scale" ,
"Platinum Scale+" ,
"Gilded Scale" ,
"Gilded Scale+" ,
"White Liver" ,
"Wyvern Tear" ,
"Large Wyvern Tear" ,
"Dragon Treasure" ,
"Unavailable" ,
"Sunbloom" ,
"Shinebloom" ,
"Goldbloom" ,
"Gourmet Shroomcap" ,
"Exquisite Shroomcap" ,
"Spirit Shroomcap" ,
"Bauble Cactus" ,
"Jewel Cactus" ,
"Kingly Cactus" ,
"Hardfruit" ,
"Rockfruit" ,
"Wildfruit" ,
"Super Abalone" ,
"Choice Abalone" ,
"Precious Abalone" ,
"Light Pearl" ,
"Deep Pearl" ,
"Innocent Pearl" ,
"Forgotten Fossil" ,
"Legendary Fossil" ,
"Mystical Fossil" ,
"Underground Fruit" ,
"Tainted Fruit" ,
"Elysian Fruit" ,
"Gaia Amber" ,
"Dragonvein Amber" ,
"Ancient Amber" ,
"Blue Beryl" ,
"True Beryl" ,
"Abyssal Beryl" ,
"Sunkissed Grass" ,
"Moonlit Mushroom" ,
"Dragonbloom" ,
"Divineapple" ,
"Violet Abalone" ,
"Platinum Pearl" ,
"Wicked Fossil" ,
"Heavenberry" ,
"Twilight Stone" ,
"Noahstone" ,
"Wyvern Egg" ,
"Herbivore Egg" ,
"Lump of Meat" ,
"Shepherd Hare" ,
"Pilot Hare" ,
"Woodland Pteryx" ,
"Forest Pteryx" ,
"Cobalt Flutterfly" ,
"Phantom Flutterfly" ,
"Climbing Joyperch" ,
"Forest Gekko" ,
"Wildspire Gekko" ,
"Gloom Gekko" ,
"Moonlight Gekko" ,
"Vaporonid" ,
"Scavantula" ,
"Revolture" ,
"Blissbill" ,
"Omenfly" ,
"Augurfly" ,
"Scalebat" ,
"Dung Beetle" ,
"Bomb Beetle" ,
"Pink Parexus" ,
"Great Pink Parexus" ,
"Burst Arowana" ,
"Bomb Arowana" ,
"Great Burst Arowana" ,
"Great Bomb Arowana" ,
"Elegant Coralbird" ,
"Dapper Coralbird" ,
"Andangler" ,
"Downy Crake" ,
"Bristly Crake" ,
"Hopguppy" ,
"Petricanths" ,
"Paratoad" ,
"Sleeptoad" ,
"Nitrotoad" ,
"Wiggler" ,
"Wiggler Queen" ,
"Vigorwasp" ,
"Giant Vigorwasp" ,
"Flying Meduso" ,
"Carrier Ant" ,
"Hercudrome" ,
"Gold Hercudrome" ,
"Prism Hercudrome" ,
"Emperor Hopper" ,
"Tyrant Hopper" ,
"Flashfly" ,
"Grandfather Mantagrell" ,
"Iron Helmcrab" ,
"Soldier Helmcrab" ,
"Emerald Helmcrab" ,
"Whetfish" ,
"Great Whetfish" ,
"Gastronome Tuna" ,
"Great Gastronome Tuna" ,
"King Marlin" ,
"Great King Marlin" ,
"Goldenfish" ,
"Platinumfish" ,
"Great Goldenfish" ,
"Great Platinumfish" ,
"Goldenfry" ,
"Great Goldenfry" ,
"Sushifish" ,
"Great Sushifish" ,
"Gunpowderfish" ,
"Great Gunpowderfish" ,
"Antidote Jewel 1" ,
"Antipara Jewel 1" ,
"Pep Jewel 1" ,
"Steadfast Jewel 1" ,
"Antiblast Jewel 1" ,
"Suture Jewel 1" ,
"Def Lock Jewel 1" ,
"Earplug Jewel 3" ,
"Wind Resist Jewel 2" ,
"Footing Jewel 2" ,
"Unavailable" ,
"Unavailable" ,
"Attack Jewel 1" ,
"Defense Jewel 1" ,
"Vitality Jewel 1" ,
"Recovery Jewel 1" ,
"Fire Res Jewel 1" ,
"Water Res Jewel 1" ,
"Ice Res Jewel 1" ,
"Thunder Res Jewel 1" ,
"Dragon Res Jewel 1" ,
"Resistor Jewel 1" ,
"Blaze Jewel 1" ,
"Stream Jewel 1" ,
"Frost Jewel 1" ,
"Bolt Jewel 1" ,
"Dragon Jewel 1" ,
"Venom Jewel 1" ,
"Paralyzer Jewel 1" ,
"Sleep Jewel 1" ,
"Blast Jewel 1" ,
"Poisoncoat Jewel 3" ,
"Paracoat Jewel 3" ,
"Sleepcoat Jewel 3" ,
"Blastcoat Jewel 3" ,
"Unavailable" ,
"Release Jewel 3" ,
"Expert Jewel 1" ,
"Critical Jewel 2" ,
"Tenderizer Jewel 2" ,
"Charger Jewel 2" ,
"Handicraft Jewel 3" ,
"Draw Jewel 2" ,
"Destroyer Jewel 2" ,
"KO Jewel 2" ,
"Drain Jewel 1" ,
"Unavailable" ,
"Flight Jewel 2" ,
"Throttle Jewel 2" ,
"Challenger Jewel 2" ,
"Flawless Jewel 2" ,
"Potential Jewel 2" ,
"Fortitude Jewel 1" ,
"Furor Jewel 2" ,
"Sonorous Jewel 1" ,
"Magazine Jewel 2" ,
"Trueshot Jewel 1" ,
"Artillery Jewel 1" ,
"Heavy Artillery Jewel 1" ,
"Sprinter Jewel 2" ,
"Physique Jewel 2" ,
"Unavailable" ,
"Refresh Jewel 2" ,
"Hungerless Jewel 1" ,
"Evasion Jewel 2" ,
"Jumping Jewel 2" ,
"Ironwall Jewel 1" ,
"Sheath Jewel 1" ,
"Friendship Jewel 1" ,
"Enduring Jewel 1" ,
"Satiated Jewel 1" ,
"Gobbler Jewel 1" ,
"Grinder Jewel 1" ,
"Bomber Jewel 1" ,
"Fungiform Jewel 1" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Protection Jewel 1" ,
"Meowster Jewel 1" ,
"Botany Jewel 1" ,
"Geology Jewel 1" ,
"Mighty Jewel 2" ,
"Stonethrower Jewel 1" ,
"Tip Toe Jewel 1" ,
"Brace Jewel 3" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Smoke Jewel 1" ,
"Mirewalker Jewel 1" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Specimen Jewel 1" ,
"Miasma Jewel 1" ,
"Scent Jewel 1" ,
"Unavailable" ,
"Intimidator Jewel 1" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Slider Jewel 2" ,
"Medicine Jewel 1" ,
"Forceshot Jewel 3" ,
"Pierce Jewel 3" ,
"Spread Jewel 3" ,
"Enhancer Jewel 2" ,
"Crisis Jewel 1" ,
"Dragonseal Jewel 3" ,
"Unavailable" ,
"Unavailable" ,
"Maintenance Jewel 1" ,
"Vigorwasp Delivery" ,
"Vigorwasp Station" ,
"Flashfly Cage" ,
"Thunderbug Cage" ,
"Shieldspire Taunt" ,
"Shieldspire Bash" ,
"Coral Cheerhorn" ,
"Coral Cheerbongo" ,
"Plunderblade" ,
"Palarang" ,
"Meowlotov Assault" ,
"Rath-of-Meow" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Stone" ,
"Redpit" ,
"Brightmoss" ,
"Scatternut" ,
"Torch Pod" ,
"Bomb Pod" ,
"Thorn Pod" ,
"Piercing Pod" ,
"Dragon Pod" ,
"Crystalburst" ,
"Puddle Pod" ,
"Chillshroom" ,
"Tailraider Voucher" ,
"Emerald Shell" ,
"Gajalaka Sketch" ,
"Mighty Bow Jewel 2" ,
"Mind's Eye Jewel 2" ,
"Shield Jewel 2" ,
"Sharp Jewel 2" ,
"Elementless Jewel 2" ,
"Deviljho Scale" ,
"Deviljho Hide" ,
"Deviljho Tallfang" ,
"Deviljho Talon" ,
"Deviljho Scalp" ,
"Deviljho Tail" ,
"Deviljho Saliva" ,
"Deviljho Gem" ,
"Kulve Taroth Golden Scale" ,
"Kulve Taroth Golden Shell" ,
"Kulve Taroth Golden Nugget" ,
"Kulve Taroth Golden Spiralhorn" ,
"Kulve Taroth Golden Tailshell" ,
"Kulve Taroth Golden Glimstone" ,
"Golden Fragment" ,
"Golden Chunk" ,
"Lunastra Scale+" ,
"Lunastra Wing" ,
"Lunastra Gem" ,
"Lunastra Carapace" ,
"Lunastra Mane" ,
"Lunastra Tail" ,
"Lunastra Horn" ,
"Behemoth Mane" ,
"Behemoth Bone" ,
"Behemoth Great Horn" ,
"Behemoth Shearclaw" ,
"Behemoth Tail" ,
"Aetheryte Shard" ,
"Spring Blossom Ticket" ,
"Summer Twilight Ticket" ,
"Autumn Harvest Ticket" ,
"Winter Star Ticket" ,
"Appreciation Ticket" ,
"Spring Insect Field Guide" ,
"Summer Insect Field Guide" ,
"Vaal Hazak Ticket" ,
"Kirin Ticket" ,
"Teostra Ticket" ,
"Kushala Daora Ticket" ,
"Nergigante Ticket" ,
"Zorah Magdaros Ticket" ,
"Xeno'jiiva Ticket" ,
"Black Bandage" ,
"Black Crystal Ticket" ,
"Kulu-Ya-Ku Ticket" ,
"Wiggler Ticket" ,
"HARDUMMY" ,
"HARDUMMY" ,
"Mega Man Ticket" ,
"SFV Ticket" ,
"SFV Ticket III" ,
"SFV Ticket II" ,
"Azure Star Shard" ,
"Azure Stargem" ,
"Red Orb" ,
"Master Craftsman's Blueprint" ,
"Dissolved Weapon" ,
"Melded Weapon" ,
"Sublimated Weapon" ,
"Bushi Ticket" ,
"Blossom Fireworks" ,
"Twilight Fireworks" ,
"Harvest Fireworks" ,
"Star Fireworks" ,
"Appreciation Fireworks" ,
"Gold Scalebat" ,
"Gold Helmcrab" ,
"Shiny Gold Helmcrab" ,
"Copper Calappa" ,
"Gold Calappa" ,
"Tsuchinoko" ,
"Cactuar Cutting" ,
"Gold Chip Fragment" ,
"Gold Nugget Fragment" ,
"Unavailable" ,
"Senu's Feather" ,
"Igni Sign" ,
"Hunter Runestone" ,
"Nekker" ,
"Unavailable" ,
"Unavailable" ,
"Downy Crake Ticket" ,
"Bristly Crake Ticket" ,
"First Fleet Ticket" ,
"Fifth Fleet Ticket" ,
"Lunastra Ticket" ,
"Transparent Stone" ,
"Flowering Cactuar Cutting" ,
"Cactuar" ,
"Faux Ticket" ,
"Faux Ticket II" ,
"Faux Ticket III" ,
"Beetle Ticket" ,
"Unavailable" ,
"Unavailable" ,
"Glamour Prism" ,
"HARDUMMY" ,
"Incandescent Weapon" ,
"Kulve Taroth Emperor Nugget" ,
"Leshen Claw" ,
"Ancient Leshen Claw" ,
"Leshen Skull" ,
"Ancient Leshen Skull" ,
"Cursed Bone" ,
"Ancient Cursed Bone" ,
"Leshen Antlers" ,
"Ancient Leshen Antlers" ,
"Leshen Resin" ,
"Mutagen" ,
"Nekker Card (Weapon)" ,
"Nekker Card (Armor)" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Assassin's Hood" ,
"Hot Drink" ,
"Unavailable" ,
"Unavailable" ,
"Gourmet Voucher" ,
"Surveyor Set" ,
"Raider Ride" ,
"Hot Pepper" ,
"Gloamgrass Bud" ,
"Dust of Life" ,
"Crystalized Bone Shard" ,
"Crystalized Monster Bone" ,
"Crystalized Elder Dragon Bone" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Vigorwasp Revival" ,
"Boombug Cage" ,
"Shieldspire Stooge" ,
"Coral Sonicgong" ,
"Mount & Plunder" ,
"Meowcano" ,
"zenny" ,
"Research Points" ,
"Eltalite Ore" ,
"Meldspar Ore" ,
"Spiritvein Crystal" ,
"Unavailable" ,
"Purecrystal" ,
"Unavailable" ,
"Bathycite Ore" ,
"Gracium" ,
"Phantomcore Ore" ,
"Shadowcore Ore" ,
"King Armor Sphere" ,
"True Armor Sphere" ,
"Thick Bone" ,
"Frozen Bone" ,
"Dragonbone Artifact" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Ancient Fragment" ,
"Monster Toughbone" ,
"Monster Slogbone" ,
"Monster Solidbone" ,
"Unavailable" ,
"Large Elder Dragon Bone" ,
"Tough Claw" ,
"Monster Essence" ,
"Deadly Poison Sac" ,
"Ultraplegia Sac" ,
"Torpor Sac" ,
"Conflagrant Sac" ,
"Flood Sac" ,
"Cryo Sac" ,
"Lightning Sac" ,
"Fey Wyvern Gem" ,
"Large Wyvern Gem" ,
"Pure Dragon Blood" ,
"Large Elder Dragon Gem" ,
"Unavailable" ,
"Prized Pelt" ,
"Anteka Antler" ,
"Unavailable" ,
"Vespoid Razorwing" ,
"Unavailable" ,
"Hornetaur Razorwing" ,
"Unavailable" ,
"Gajau Thickhide" ,
"Steel Gajau Whisker" ,
"Wingdrake Finehide" ,
"Barnos Hardclaw" ,
"Unavailable" ,
"Cortos Hardclaw" ,
"Kestodon Husk" ,
"Unavailable" ,
"Gastodon Husk" ,
"Unavailable" ,
"Jagras Shard" ,
"Unavailable" ,
"Shamos Shard" ,
"Unavailable" ,
"Girros Shard" ,
"Unavailable" ,
"Wulg Thickfur" ,
"Unavailable" ,
"Great Jagras Shard" ,
"Great Jagras Thickhide" ,
"Great Jagras Hardclaw" ,
"Great Jagras Mane+" ,
"Kulu-Ya-Ku Shard" ,
"Kulu-Ya-Ku Thickhide" ,
"Large Kulu-Ya-Ku Plume" ,
"Large Kulu-Ya-Ku Beak" ,
"Pukei-Pukei Shard" ,
"Pukei-Pukei Cortex" ,
"Pukei-Pukei Fellwing" ,
"Large Pukei-Pukei Sac" ,
"Pukei-Pukei Lash" ,
"Coral Pukei-Pukei Shard" ,
"Coral Pukei-Pukei Cortex" ,
"Coral Pukei-Pukei Fellwing" ,
"Large Coral Pukei-Pukei Sac" ,
"Coral Pukei-Pukei Lash" ,
"Barroth Cortex" ,
"Barroth Chine" ,
"Barroth Hardclaw" ,
"Barroth Crown" ,
"Barroth Lash" ,
"Rich Mud" ,
"Jyuratodus Shard" ,
"Jyuratodus Cortex" ,
"Jyuratodus Hardfang" ,
"Jyuratodus Grandfin" ,
"Beotodus Shard" ,
"Beotodus Cortex" ,
"Beotodus Hardhorn" ,
"Beotodus Grandfin" ,
"Tobi-Kadachi Shard" ,
"Tobi-Kadachi Thickfur" ,
"Tobi-Kadachi Membrane+" ,
"Tobi-Kadachi Hardclaw" ,
"Tobi-Kadachi Cathode" ,
"Viper Tobi-Kadachi Shard" ,
"Viper Tobi-Kadachi Thickfur" ,
"Viper Tobi-Kadachi Membrane+" ,
"Viper Tobi-Kadachi Hardclaw" ,
"Viper Tobi-Kadachi Thorn" ,
"Banbaro Cortex" ,
"Banbaro Chine" ,
"Banbaro Great Horn" ,
"Banbaro Lash" ,
"Anjanath Shard" ,
"Anjanath Fur" ,
"Anjanath Hardfang" ,
"Heavy Anjanath Nosebone" ,
"Anjanath Lash" ,
"Anjanath Mantle" ,
"Fulgur Anjanath Shard" ,
"Fulgur Anjanath Thickfur" ,
"Fulgur Anjanath Hardfang" ,
"Heavy Fulgur Anjanath Nosebone" ,
"Fulgur Anjanath Lash" ,
"Fulgur Anjanath Mantle" ,
"Rathian Shard" ,
"Rathian Cortex" ,
"Rathian Weave" ,
"Rathian Surspike" ,
"Rathian Mantle" ,
"Pink Rathian Shard" ,
"Pink Rathian Cortex" ,
"Gold Rathian Shard" ,
"Gold Rathian Cortex" ,
"Gold Rathian Surspike" ,
"Tzitzi-Ya-Ku Shard" ,
"Tzitzi-Ya-Ku Thickhide" ,
"Tzitzi-Ya-Ku Hardclaw" ,
"Tzitzi-Ya-Ku Photomembrane" ,
"Paolumu Thickfur" ,
"Paolumu Shard" ,
"Paolumu Cortex" ,
"Paolumu Fellwing" ,
"Nightshade Paolumu Thickfur" ,
"Nightshade Paolumu Shard" ,
"Nightshade Paolumu Fellwing" ,
"Great Girros Shard" ,
"Great Girros Thickhide" ,
"Great Girros Hardhood" ,
"Great Girros Hardfang" ,
"Great Girros Lash" ,
"Radobaan Shard" ,
"Radobaan Cortex" ,
"Radobaan Oilshell+" ,
"Large Wyvern Bonemass" ,
"Legiana Shard" ,
"Legiana Thickhide" ,
"Legiana Hardclaw" ,
"Legiana Fellwing" ,
"Legiana Tail Webbing+" ,
"Legiana Mantle" ,
"Unavailable" ,
"Rimed Hide" ,
"Obsidian Icetalon" ,
"Stark Wing" ,
"Unavailable" ,
"Unavailable" ,
"Odogaron Shard" ,
"Hard Odogaron Sinew" ,
"Odogaron Hardclaw" ,
"Odogaron Hardfang" ,
"Odogaron Lash" ,
"Odogaron Mantle" ,
"Ebony Odogaron Shard" ,
"Hard Ebony Odogaron Sinew" ,
"Ebony Odogaron Hardclaw" ,
"Ebony Odogaron Hardfang" ,
"Ebony Odogaron Lash" ,
"Ebony Odogaron Mantle" ,
"Rathalos Shard" ,
"Rathalos Cortex" ,
"Rathalos Fellwing" ,
"Rathalos Lash" ,
"Rath Wingtalon+" ,
"Rathalos Mantle" ,
"Azure Rathalos Shard" ,
"Azure Rathalos Cortex" ,
"Azure Rathalos Lash" ,
"Azure Rathalos Fellwing" ,
"Silver Rathalos Shard" ,
"Silver Rathalos Cortex" ,
"Silver Rathalos Fellwing" ,
"Silver Rathalos Lash" ,
"Rath Gleam" ,
"Diablos Cortex" ,
"Diablos Chine" ,
"Diablos Tailcase+" ,
"Twisted Stouthorn" ,
"Diablos Hardhorn" ,
"Black Diablos Cortex" ,
"Black Diablos Chine" ,
"Blackcurl Stouthorn" ,
"Dodogama Shard" ,
"Dodogama Thickhide" ,
"Dodogama Mandible" ,
"Dodogama Hardclaw" ,
"Dodogama Lash" ,
"Lavasioth Shard" ,
"Lavasioth Cortex" ,
"Lavasioth Hardfang" ,
"Lavasioth Grandfin" ,
"Uragaan Shard" ,
"Uragaan Cortex" ,
"Uragaan Jaw+" ,
"Uragaan Scute+" ,
"Uragaan Pallium" ,
"Barioth Cortex" ,
"Barioth Thickfur" ,
"Barioth Hardclaw" ,
"Barioth Greatspike" ,
"Barioth Lash" ,
"Amber Hardfang" ,
"Nargacuga Shard" ,
"Nargacuga Blackfur+" ,
"Nargacuga Lash" ,
"Nargacuga Tailspear" ,
"Nargacuga Cutwing+" ,
"Nargacuga Hardfang" ,
"Nargacuga Mantle" ,
"Tigrex Shard" ,
"Tigrex Cortex" ,
"Tigrex Lash" ,
"Tigrex Hardclaw" ,
"Tigrex Hardfang" ,
"Tigrex Mantle" ,
"Brute Tigrex Shard" ,
"Brute Tigrex Cortex" ,
"Brute Tigrex Hardclaw" ,
"Brute Tigrex Hardfang" ,
"Glavenus Shard" ,
"Glavenus Cortex" ,
"Glavenus Hardfang" ,
"Glavenus Hellshell" ,
"Glavenus Tailedge" ,
"Molten Bursa" ,
"Glavenus Mantle" ,
"Acidic Glavenus Shard" ,
"Acidic Glavenus Cortex" ,
"Acidic Glavenus Hardfang" ,
"Acidic Glavenus Spineshell" ,
"Acidic Glavenus Tailedge" ,
"Honed Acidcryst" ,
"Unavailable" ,
"Brachydios Cortex" ,
"Fine Brachydios Ebonshell" ,
"Brachydios Crown" ,
"Glowing Slime" ,
"Brachydios Pounder+" ,
"Brachydios Lash" ,
"Brachydios Pallium" ,
"Brach Warhead" ,
"Flashpoint Slime" ,
"Brach Obliterator" ,
"Immortal Reactor" ,
"Garuga Shard" ,
"Garuga Cortex" ,
"Garuga Auricle" ,
"Fancy Beak" ,
"Garuga Fellwing" ,
"Garuga Lash" ,
"Garuga Silverpelt" ,
"Zinogre Cortex" ,
"Zinogre Electrofur+" ,
"Zinogre Hardhorn" ,
"Zinogre Hardclaw" ,
"Zinogre Lash" ,
"Zinogre Deathly Shocker" ,
"Fulgurbug" ,
"Zinogre Skymerald" ,
"Stygian Zinogre Cortex" ,
"Stygian Zinogre Dragonlocks" ,
"Stygian Zinogre Hardhorn" ,
"Stygian Zinogre Hardclaw" ,
"Stygian Zinogre Lash" ,
"Stygian Zinogre Dragonhold" ,
"Dracophage Bug" ,
"Stygian Zinogre Skymerald" ,
"Bazelgeuse Shard" ,
"Flickering Silvershell" ,
"Bazelgeuse Flail" ,
"Distilled Blast Fluid" ,
"Bazelgeuse Hardclaw" ,
"Scorching Silverwing" ,
"Bazelgeuse Mantle" ,
"Deviljho Shard" ,
"Deviljho Blackpiel" ,
"Unavailable" ,
"Vile Fang" ,
"Deviljho Ripper" ,
"Deviljho Flail" ,
"Black Blood" ,
"Deviljho Crook" ,
"Rajang Wildpelt" ,
"Rajang Hardfang" ,
"Rajang Hardclaw" ,
"Rajang Tail" ,
"Gold Rajang Pelt+" ,
"Rajang Apoplexy" ,
"Rajang Hardhorn" ,
"Ghoulish Gold Gorer" ,
"Rajang Heart" ,
"Kirin Finehide" ,
"Kirin Thundertail+" ,
"Kirin Silvermane" ,
"Kirin Azure Horn+" ,
"Immortal Shard" ,
"Nergigante Cortex" ,
"Nergigante Flail" ,
"Annihilating Greathorn" ,
"Nergigante Hardclaw" ,
"Eternal Regrowth Plate" ,
"Crystal Shard" ,
"Velkhana Cortex" ,
"Velkhana Fellwing" ,
"Velkhana Crownhorn" ,
"Velkhana Lash" ,
"Velkhana Hardclaw" ,
"Velkhana Crystal" ,
"Teostra Cortex" ,
"Teostra Mane+" ,
"Teostra Lash" ,
"Teostra Hardhorn" ,
"Hellfire Shard" ,
"Fire Dragon Hardclaw" ,
"Teostra Fellwing" ,
"Lunastra Cortex" ,
"Lunastra Mane+" ,
"Lunastra Lash" ,
"Lunastra Hardhorn" ,
"Lunastra Shard" ,
"Lunastra Fellwing" ,
"Daora Cortex" ,
"Daora Shard" ,
"Daora Fellwing" ,
"Daora Hardhorn" ,
"Daora Lash" ,
"Daora Hardclaw" ,
"Deceased Shard" ,
"Vaal Hazak Cortex" ,
"Deathweaver Membrane" ,
"Vaal Hazak Flail" ,
"Shadowpierce Fang" ,
"Vaal Hazak Hardclaw" ,
"Vaal Hazak Fellwing" ,
"Namielle Finehide" ,
"Unavailable" ,
"Namielle Fellwing" ,
"Namielle Whisker" ,
"Namielle Lash" ,
"Namielle Hardclaw" ,
"Unavailable" ,
"Safi'jiiva Shard" ,
"Safi'jiiva Cortex" ,
"Pulsing Dragonshell" ,
"Safi'jiiva Lash" ,
"Safi'jiiva Hardhorn" ,
"Safi'jiiva Hardclaw" ,
"Safi'jiiva Fellwing" ,
"Zionium Crystal" ,
"Shara Ishvalda Tenderscale" ,
"Shara Ishvalda Boulderplate" ,
"Unavailable" ,
"Shara Ishvalda Tenderplate" ,
"Shara Ishvalda Petalstone" ,
"Shara Ishvalda Tenderclaw" ,
"Shara Ishvalda Gem" ,
"Alatreon Pallium" ,
"Alatreon Mantle" ,
"Alatreon Riptalon" ,
"Alatreon Direwing" ,
"Alatreon Diretail" ,
"Skyswayer" ,
"Azure Dragonsphire" ,
"Ancient Feystone" ,
"Carved Feystone" ,
"Sealed Feystone" ,
"Decayed Scale" ,
"Luminous Scale" ,
"Old Dragon Treasure" ,
"Indestructible Ebonshell" ,
"Unavailable" ,
"??? Shard" ,
"??? Boulderplate" ,
"??? Cortex" ,
"??? Rock" ,
"??? Hardclaw" ,
"Large ??? Gem" ,
"Kulve Taroth Golden Scale+" ,
"Kulve Taroth Golden Shell+" ,
"Kulve Taroth Golden Nugget+" ,
"Kulve Taroth Golden Spiralhorn+" ,
"Kulve Taroth Golden Tailshell+" ,
"Golden Dragonsphire" ,
"Unavailable" ,
"Unavailable" ,
"Celestial Wyverian Print" ,
"Conqueror's Seal" ,
"Research Commission Ticket+" ,
"Banbaro Coin" ,
"Paolumu Coin" ,
"Nargacuga Coin" ,
"Glavenus Coin" ,
"Odogaron Coin" ,
"Zinogre Coin" ,
"Black Belt Coin" ,
"Hero King Coin" ,
"Tigrex Coin" ,
"Giant Scale" ,
"Magnificent Scale" ,
"Boaboa Ticket" ,
"Young Butterbur" ,
"Exquisite Butterbur" ,
"Millennium Butterbur" ,
"Icebloom" ,
"Moonlight Icebloom" ,
"Snowpeak Icebloom" ,
"Snow White" ,
"Petalcryst" ,
"EZ Dust of Life" ,
"Pearlspring Macaque" ,
"Goldspring Macaque" ,
"Unavailable" ,
"Crowned Prawn" ,
"Moon Slug" ,
"Duffel Penguin" ,
"Arrowhead Gekko" ,
"Blue Diva" ,
"Sealord's Crestfish" ,
"Glass Parexus" ,
"Wintermoon Nettle" ,
"Moly" ,
"Mossy Moly" ,
"Rocky Moly" ,
"Fluffy Moly" ,
"Spiny Moly" ,
"Rowdy Moly" ,
"Frosty Moly" ,
"Great Glass Parexus" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Dragonvein Shard" ,
"Dragonvein Coal" ,
"Dragonvein Coal Chunk" ,
"Cloth Curtain (Small)" ,
"Pelt Curtain (Small)" ,
"Elegant Curtain (Small)" ,
"Cute Curtain (Small)" ,
"Cloth Curtain (Large)" ,
"Pelt Curtain (Large)" ,
"Elegant Curtain (Large)" ,
"Cute Curtain (Large)" ,
"Familiar Sofa" ,
"Unavailable" ,
"Luxury Sofa" ,
"Elegant Sofa" ,
"Cute Sofa" ,
"Rustic Bed" ,
"Familiar Bed" ,
"Luxury Bed" ,
"Cute Bed" ,
"Familiar Table" ,
"Luxury Table" ,
"Elegant Table" ,
"Cute Table" ,
"Rustic Chairs" ,
"Familiar Chairs" ,
"Luxury Chairs" ,
"Elegant Chairs" ,
"Cute Chairs" ,
"Carnivore Carnival" ,
"Party Platter" ,
"Tropical Lunch" ,
"Sumptuous Stew" ,
"Hunter's Brunch" ,
"Familiar Chest" ,
"Luxury Chest" ,
"Cute Chest" ,
"Hoarfrost Reach Plant 1" ,
"Hoarfrost Reach Plant 2" ,
"Hoarfrost Reach Plant 4" ,
"Hoarfrost Reach Plant 3" ,
"Ancient Forest Plant 1" ,
"Wildspire Wastes Plant 3" ,
"Ancient Forest Plant 4" ,
"Ancient Forest Plant 5" ,
"Ancient Forest Plant 3" ,
"Wildspire Wastes Plant 2" ,
"Wildspire Wastes Plant 4" ,
"Wildspire Wastes Plant 1" ,
"Ancient Forest Plant 2" ,
"Rotten Vale Plant 1" ,
"Rotten Vale Plant 2" ,
"Simple Urn" ,
"Grimalkyne Doll" ,
"Gajalaka Doll" ,
"Boaboa Doll" ,
"Felyne Doll" ,
"Grimalkyne Doll (Black)" ,
"Grimalkyne Doll (Navy)" ,
"Grimalkyne Doll (Blue)" ,
"Poogie Doll (Memorial Stripes)" ,
"Poogie Doll (Emperor's Duds)" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Luxury Pitcher" ,
"Luxury Vase" ,
"Simple Urn Set" ,
"Burlap Sacks" ,
"Bottled Spirit" ,
"Assorted Bottle Set" ,
"Crafting Tools" ,
"Dyed Silk Rolls" ,
"Ornamental Horn" ,
"Display Fossil" ,
"Simple Pottery" ,
"Pottery Set" ,
"Ornamental Plate Set (Small)" ,
"Ornamental Plate (Large)" ,
"Basket of Ore" ,
"Sake Barrel" ,
"First Aid Kit" ,
"Refined Vase (Small)" ,
"Potted Plant" ,
"Research Tomes" ,
"Scholarly Tomes" ,
"Refined Vase (Large)" ,
"Potted Cactus" ,
"Colorful Planting" ,
"Basket of Mushrooms" ,
"Fruit Bowl" ,
"Vegetable Display" ,
"Fierce Gajalaka Mask" ,
"Grimacing Gajalaka Mask" ,
"Surprised Gajalaka Mask" ,
"Amber" ,
"Blue Ore" ,
"Red Ore" ,
"Seashell" ,
"Symbol of Assistance" ,
"Symbol of Contribution" ,
"Symbol of Dedication" ,
"Symbol of Valor" ,
"Goldenfry Mobile" ,
"Whetfish Mobile" ,
"Marlin Mobile" ,
"Memorial Ornament" ,
"Emperor Ornament" ,
"Fun Spheres Ornament" ,
"Barrel Ornament" ,
"Catch-of-the-Day Ornament" ,
"Fish Ornament" ,
"Marlin Ornament" ,
"Elegant Flag" ,
"Nargacuga Painting" ,
"Research Base Painting" ,
"Handler Portrait" ,
"Elegant Ornamental Plate" ,
"Gajalaka Painting 1" ,
"Boaboa Painting 1" ,
"Grimalkyne Painting 1" ,
"Poogie Painting" ,
"Palico Portraits" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Familiar Desk" ,
"Luxury Desk" ,
"Cute Desk" ,
"Familiar Shelves" ,
"Intellectual Shelves" ,
"Cluttered Shelves" ,
"Luxury Shelves" ,
"Elegant Shelves" ,
"Cute Shelves" ,
"Music Player" ,
"Familiar Lights" ,
"Sturdy Lights" ,
"Luxury Lights" ,
"Cute Lights" ,
"Simple Lights" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Familiar Rack" ,
"Luxury Rack" ,
"Cute Rack" ,
"Simple Wall Shelf (Large)" ,
"Luxury Wall Shelf (Large)" ,
"Cute Wall Shelf (Large)" ,
"Simple Wall Shelf (Small)" ,
"Luxury Wall Shelf (Small)" ,
"Cute Wall Shelf (Small)" ,
"Elegant Wall-Hanging (Red)" ,
"Elegant Wall-Hanging (Blue)" ,
"Zorah Magdaros Painting" ,
"Cloth Wall-Hanging" ,
"Fur Wall-Hanging" ,
"Ship's Wheel Wall-Hanging" ,
"Ornamental Plate Set" ,
"Gajalaka Painting 2" ,
"Boaboa Painting 2" ,
"Grimalkyne Painting 2" ,
"Ancient Forest Painting" ,
"Wildspire Wastes Painting" ,
"Coral Highlands Painting" ,
"Rotten Vale Painting" ,
"Elder's Recess Painting" ,
"Hoarfrost Reach Painting" ,
"Books and Documents" ,
"Healthy Refreshments" ,
"Stuffed Doll Crafting Set" ,
"Maps" ,
"Crafting Set" ,
"Baking Set" ,
"Tool Set" ,
"Familiar Rugs (1F)" ,
"Luxury Rugs (1F)" ,
"Cute Rugs (1F)" ,
"Fur Rugs (1F)" ,
"Familiar Rugs (2F)" ,
"Luxury Rugs (2F)" ,
"Cute Rugs (2F)" ,
"Fur Rugs (2F)" ,
"Lantern" ,
"Hanging Lantern" ,
"Lamp" ,
"Candle" ,
"Candlestick" ,
"Songbird Lamp" ,
"Jellyfish Lamp" ,
"Angler Fish Lamp" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Botanical Pattern" ,
"Elegant Pattern" ,
"Patchwork" ,
"Patchwork (Brown)" ,
"Patchwork (Gray)" ,
"Check (Red)" ,
"Check (White)" ,
"Check (Blue)" ,
"Trap and Beast (Brown)" ,
"Trap and Beast (Navy)" ,
"Trap and Beast (Aqua)" ,
"Trap and Beast (Yellow)" ,
"Wild Nature (Vibrant)" ,
"Wild Nature (Red)" ,
"Wild Nature (Green)" ,
"Nature Check (Green)" ,
"Nature Check (Blue)" ,
"Traditional Pattern (Black)" ,
"Traditional Pattern (Vibrant)" ,
"Traditional Pattern (Brown)" ,
"Traditional Pattern (Pink)" ,
"Traditional Pattern (Aqua)" ,
"Traditional Pattern (Warm)" ,
"Traditional Pattern (Red)" ,
"Hunter Pattern (Brown)" ,
"Hunter Pattern (White)" ,
"Hunter Pattern (Gold)" ,
"Hunter Pattern (Red)" ,
"Polka Dot (White)" ,
"Polka Dot (Pink)" ,
"Polka Dot (Yellow)" ,
"Check (Vibrant)" ,
"Check (Green)" ,
"Palico Print (Pink)" ,
"Palico Print (Brown)" ,
"Felyne Print (Yellow)" ,
"Felyne Print (Blue)" ,
"Life Print: Small (White)" ,
"Life Print: Small (Blue)" ,
"Life Print: Small (Pink)" ,
"Life Print: Large (White)" ,
"Life Print: Large (Yellow)" ,
"Stripes" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Light Wood" ,
"Dark Wood" ,
"Light Iron" ,
"Dark Iron" ,
"Silver" ,
"Gold" ,
"Stone" ,
"Home Sweet Home" ,
"Traditional Room" ,
"Elegant Refinement" ,
"Sweet Tooth" ,
"Pure Decadence" ,
"The Minimalist" ,
"Wooden Floor" ,
"Chic Wooden Floor" ,
"Simple Stone Floor" ,
"Elegant Floor (Red)" ,
"Luxury Stone Floor" ,
"Marble Tile Floor" ,
"Cute Floor (Peach)" ,
"Ceramic Tile Floor (Brown)" ,
"Marble Floor (Black)" ,
"Chic Stone Floor" ,
"Wooden Wall" ,
"Chic Wooden Wall" ,
"Simple Stone Wall" ,
"Botanical Patterned Wall" ,
"Luxury Wood-carved Wall" ,
"Simple Stucco Wall" ,
"Striped Wall (Blue)" ,
"Ceramic Tile Wall (Brown)" ,
"Elegant Wall" ,
"Marble Wall" ,
"Elegant Stucco Wall" ,
"Wooden Floor (White)" ,
"Wooden Floor (Green)" ,
"Wooden Floor (Blue)" ,
"Wooden Floor (Red)" ,
"Wooden Floor (Yellow)" ,
"Light Wooden Floor" ,
"Wooden Wall (White)" ,
"Wooden Wall (Green)" ,
"Wooden Wall (Blue)" ,
"Wooden Wall (Red)" ,
"Wooden Wall (Yellow)" ,
"Stucco Wall (Orange)" ,
"Stucco Wall (Green)" ,
"Stucco Wall (Red)" ,
"Stucco Wall (Blue)" ,
"Traditional Bench" ,
"Traditional Bed" ,
"Traditional Table" ,
"Traditional Meal" ,
"Traditional Chest" ,
"Traditional Rugs (1F)" ,
"Traditional Rugs (2F)" ,
"Traditional Wall" ,
"Traditional Floor" ,
"Traditional Lights" ,
"Unavailable" ,
"Dragonrazer Fuel Cell" ,
"Tailraider Signal" ,
"Unavailable" ,
"Bugtrappers: Fried Dragonfly" ,
"Protectors: Dried Goldenfish" ,
"Troupers: Horned Urchin" ,
"Plunderers: Steamed Cricket" ,
"Grimalkyne: Pot-au-magma" ,
"Boaboa: Boaboa Bread" ,
"Thermae Ticket" ,
"Scratched Shell" ,
"Stonebill" ,
"Rime Beetle" ,
"Hot Spring Stone" ,
"Decayed Crystal" ,
"Forest Crystal" ,
"Prosperous Crystal" ,
"Guiding Forest Crystal" ,
"Cracked Crystal" ,
"Wasteland Crystal" ,
"Serene Crystal" ,
"Guiding Wasteland Crystal" ,
"Pale Crystal" ,
"Reef Crystal" ,
"Deepsea Crystal" ,
"Guiding Reef Crystal" ,
"Distorted Crystal" ,
"Effluvial Crystal" ,
"Twilight Crystal" ,
"Guiding Effluvial Crystal" ,
"Melted Crystal" ,
"Magma Crystal" ,
"Hellfire Crystal" ,
"Guiding Magma Crystal" ,
"Frozen Crystal" ,
"Rime Crystal" ,
"Daybreak Crystal" ,
"Guiding Rime Crystal" ,
"Mossy Greatbone" ,
"Woodland Greatbone" ,
"Slumbering Greatbone" ,
"Guiding Forest Dragonbone" ,
"Weathered Cragbone" ,
"Wasteland Cragbone" ,
"Tempered Cragbone" ,
"Guiding Wasteland Dragonbone" ,
"Vivid Crimsonbone" ,
"Coral Crimsonbone" ,
"Vibrant Crimsonbone" ,
"Guiding Reef Dragonbone" ,
"Malformed Frenzybone" ,
"Effluvial Frenzybone" ,
"Afflicted Frenzybone" ,
"Guiding Rotted Dragonbone" ,
"Simmering Wildbone" ,
"Volcanic Wildbone" ,
"Dragonscorched Wildbone" ,
"Guiding Volcanic Dragonbone" ,
"Hoary Icebone" ,
"Tundra Icebone" ,
"Everfrost Icebone" ,
"Guiding Tundra Dragonbone" ,
"Fierce Dragonvein Bone" ,
"Heavy Dragonvein Bone" ,
"Dragonvein Solidbone" ,
"Elder Dragonvein Bone" ,
"Unavailable" ,
"Spiritvein Slogbone" ,
"Spiritvein Solidbone" ,
"Elder Spiritvein Bone" ,
"Spiritvein Gem Shard" ,
"Spiritvein Gem" ,
"Great Spiritvein Gem" ,
"Rugged Mane" ,
"Unavailable" ,
"Colorful Plume" ,
"Unavailable" ,
"Fragrant Poison Sac" ,
"Tempered Poison Sac" ,
"Hydrated Sac" ,
"Tempered Torrent Sac" ,
"Muddy Crown" ,
"Tempered Crown" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Blinding Cathode" ,
"Tempered Cathode" ,
"Enticing Viperthorn" ,
"Tempered Viperthorn" ,
"Ancient Great Horn" ,
"Tempered Great Horn" ,
"Flickering Flamepelt" ,
"Tempered Flamepelt" ,
"Crackling Thunderpelt" ,
"Tempered Thunderpelt" ,
"Queen's Scale" ,
"Tempered Green Scale" ,
"Pink Scale" ,
"Tempered Pink Scale" ,
"Dazzling Photophore+" ,
"Unavailable" ,
"Rubbery Shell" ,
"Tempered Rubbery Shell" ,
"Obsidian Fur" ,
"Tempered Hide" ,
"Night Hood" ,
"Unavailable" ,
"Inkstained Oilshell+" ,
"Tempered Oilshell+" ,
"Heavy Jaw" ,
"Unavailable" ,
"Incandescent Magmafin" ,
"Tempered Magmafin" ,
"Metallic Scute" ,
"Tempered Scute" ,
"Coldblooded Icefang" ,
"Tempered Icefang" ,
"Sinister Silverpelt" ,
"Tempered Silverpelt" ,
"Smooth Icehide" ,
"Tempered Icehide" ,
"Crystal Frozenhide" ,
"Tempered Frosthide" ,
"Fatal Rendclaw" ,
"Tempered Rendclaw" ,
"Soulrender Talon" ,
"Tempered Talon" ,
"King's Scale" ,
"Tempered Red Scale" ,
"Azure Scale" ,
"Tempered Azure Scale" ,
"Twisted Bravehorn" ,
"Twisted Temperhorn" ,
"Blackcurl Tyranthorn" ,
"Blackcurl Temperhorn" ,
"Assassin Cutwing" ,
"Tempered Cutwing" ,
"Smoldering Tailedge" ,
"Tempered Tailedge" ,
"Honed Tailblade" ,
"Tempered Tailblade" ,
"Glossy Ebonshell" ,
"Tempered Ebonshell" ,
"Strongman's Jaw" ,
"Tempered Jaw" ,
"Shuddering Darkjaw" ,
"Tempered Ebonjaw" ,
"Charged Deathly Shocker" ,
"Tempered Shocker" ,
"Crimson Blastscale" ,
"Tempered Blastscale" ,
"Bloodstained Ebonhide" ,
"Spattered Hide" ,
"Solemn Azure Horn" ,
"Tempered Azure Horn" ,
"Hellfire Mane" ,
"Tempered Crimson Mane" ,
"Stormcall Steelwing" ,
"Tempered Steelwing" ,
"Azure Mane" ,
"Tempered Azure Mane" ,
"Aurora Crownhorn" ,
"Tempered Crownhorn" ,
"Twilight Fang" ,
"Tempered Twilight Fang" ,
"Enchanting Finehide" ,
"Tempered Trancehide" ,
"Extinction Greathorn" ,
"Annihilating Temperhorn" ,
"Moonlight Scale" ,
"Tempered Gold Scale" ,
"Scorching Scale" ,
"Tempered Silver Scale" ,
"Gushing Dragonhold" ,
"Tempered Dragonhold" ,
"Bloodthirsty Glimmerpelt" ,
"Tempered Glimmerpelt" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Special Scope" ,
"Sublime First Wyverian Print" ,
"Steam Ticket" ,
"Giant Dragonvein Coal" ,
"Phoenix Jewel 3" ,
"Guardian Jewel 2" ,
"Cooling Jewel 2" ,
"Fire Res Jewel+ 4" ,
"Water Res Jewel+ 4" ,
"Ice Res Jewel+ 4" ,
"Thunder Res Jewel+ 4" ,
"Dragon Res Jewel+ 4" ,
"Blaze Jewel+ 4" ,
"Stream Jewel+ 4" ,
"Frost Jewel+ 4" ,
"Bolt Jewel+ 4" ,
"Dragon Jewel+ 4" ,
"Venom Jewel+ 4" ,
"Paralyzer Jewel+ 4" ,
"Sleep Jewel+ 4" ,
"Blast Jewel+ 4" ,
"Hard Fire Res Jewel 4" ,
"Hard Water Res Jewel 4" ,
"Hard Ice Res Jewel 4" ,
"Hard Thunder Res Jewel 4" ,
"Hard Dragon Res Jewel 4" ,
"Antidote Jewel+ 4" ,
"Antipara Jewel+ 4" ,
"Pep Jewel+ 4" ,
"Steadfast Jewel+ 4" ,
"Antiblast Jewel+ 4" ,
"Suture Jewel+ 4" ,
"Def Lock Jewel+ 4" ,
"Miasma Jewel+ 4" ,
"Hungerless Jewel+ 4" ,
"Recovery Jewel+ 4" ,
"Tip Toe Jewel+ 4" ,
"Intimidator Jewel+ 4" ,
"Meowster Jewel+ 4" ,
"Hard Tip Toe Jewel 4" ,
"Hard Intimidator Jewel 4" ,
"Hard Meowster Jewel 4" ,
"Trueshot Jewel+ 4" ,
"Heavy Artillery Jewel+ 4" ,
"Botany Jewel+ 4" ,
"Geology Jewel+ 4" ,
"Survival Jewel+ 4" ,
"Mirewalker Jewel+ 4" ,
"Specimen Jewel+ 4" ,
"Sonorous Jewel+ 4" ,
"Hard Botany Jewel+ 4" ,
"Hard Geology Jewel 4" ,
"Hard Survival Jewel 4" ,
"Hard Specimen Jewel 4" ,
"Enduring Jewel+ 4" ,
"Defense Jewel+ 4" ,
"Hard Enduring Jewel 4" ,
"Hard Defense Jewel 4" ,
"Artillery Jewel+ 4" ,
"Earplug Jewel+ 4" ,
"Wind Resist Jewel+ 4" ,
"Attack Jewel+ 4" ,
"Expert Jewel+ 4" ,
"Handicraft Jewel+ 4" ,
"Throttle Jewel+ 4" ,
"Challenger Jewel+ 4" ,
"Potential Jewel+ 4" ,
"Furor Jewel+ 4" ,
"Physique Jewel+ 4" ,
"Evasion Jewel+ 4" ,
"Ironwall Jewel+ 4" ,
"Friendship Jewel+ 4" ,
"Drain/Physique Jewel 4" ,
"Fortitude/Physique Jewel 4" ,
"Crisis/Physique Jewel 4" ,
"Ironwall/Physique Jewel 4" ,
"Friendship/Physique Jewel 4" ,
"Satiated/Physique Jewel 4" ,
"Stonethrower/Physique Jewel 4" ,
"Resistor/Physique Jewel 4" ,
"Flight/Physique Jewel 4" ,
"Sprinter/Physique Jewel 4" ,
"Refresh/Physique Jewel 4" ,
"Jumping/Physique Jewel 4" ,
"Sheath/Physique Jewel 4" ,
"Gobbler/Physique Jewel 4" ,
"Grinder/Physique Jewel 4" ,
"Bomber/Physique Jewel 4" ,
"Fungiform/Physique Jewel 4" ,
"Slider/Physique Jewel 4" ,
"Guardian/Physique Jewel 4" ,
"Drain/Evasion Jewel 4" ,
"Fortitude/Evasion Jewel 4" ,
"Crisis/Evasion Jewel 4" ,
"Ironwall/Evasion Jewel 4" ,
"Friendship/Evasion Jewel 4" ,
"Satiated/Evasion Jewel 4" ,
"Stonethrower/Evasion Jewel 4" ,
"Resistor/Evasion Jewel 4" ,
"Flight/Evasion Jewel 4" ,
"Sprinter/Evasion Jewel 4" ,
"Refresh/Evasion Jewel 4" ,
"Jumping/Evasion Jewel 4" ,
"Sheath/Evasion Jewel 4" ,
"Gobbler/Evasion Jewel 4" ,
"Grinder/Evasion Jewel 4" ,
"Bomber/Evasion Jewel 4" ,
"Fungiform/Evasion Jewel 4" ,
"Slider/Evasion Jewel 4" ,
"Guardian/Evasion Jewel 4" ,
"Drain/Attack Jewel 4" ,
"Fortitude/Attack Jewel 4" ,
"Crisis/Attack Jewel 4" ,
"Ironwall/Attack Jewel 4" ,
"Friendship/Attack Jewel 4" ,
"Satiated/Attack Jewel 4" ,
"Stonethrower/Attack Jewel 4" ,
"Resistor/Attack Jewel 4" ,
"Flight/Attack Jewel 4" ,
"Sprinter/Attack Jewel 4" ,
"Refresh/Attack Jewel 4" ,
"Jumping/Attack Jewel 4" ,
"Sheath/Attack Jewel 4" ,
"Gobbler/Attack Jewel 4" ,
"Grinder/Attack Jewel 4" ,
"Bomber/Attack Jewel 4" ,
"Fungiform/Attack Jewel 4" ,
"Slider/Attack Jewel 4" ,
"Guardian/Attack Jewel 4" ,
"Drain/Expert Jewel 4" ,
"Fortitude/Expert Jewel 4" ,
"Crisis/Expert Jewel 4" ,
"Ironwall/Expert Jewel 4" ,
"Friendship/Expert Jewel 4" ,
"Satiated/Expert Jewel 4" ,
"Stonethrower/Expert Jewel 4" ,
"Resistor/Expert Jewel 4" ,
"Flight/Expert Jewel 4" ,
"Sprinter/Expert Jewel 4" ,
"Refresh/Expert Jewel 4" ,
"Jumping/Expert Jewel 4" ,
"Sheath/Expert Jewel 4" ,
"Gobbler/Expert Jewel 4" ,
"Grinder/Expert Jewel 4" ,
"Bomber/Expert Jewel 4" ,
"Fungiform/Expert Jewel 4" ,
"Slider/Expert Jewel 4" ,
"Guardian/Expert Jewel 4" ,
"Drain/Release Jewel 4" ,
"Fortitude/Release Jewel 4" ,
"Crisis/Release Jewel 4" ,
"Ironwall/Release Jewel 4" ,
"Friendship/Release Jewel 4" ,
"Satiated/Release Jewel 4" ,
"Stonethrower/Release Jewel 4" ,
"Resistor/Release Jewel 4" ,
"Flight/Release Jewel 4" ,
"Sprinter/Release Jewel 4" ,
"Refresh/Release Jewel 4" ,
"Jumping/Release Jewel 4" ,
"Sheath/Release Jewel 4" ,
"Gobbler/Release Jewel 4" ,
"Grinder/Release Jewel 4" ,
"Bomber/Release Jewel 4" ,
"Fungiform/Release Jewel 4" ,
"Slider/Release Jewel 4" ,
"Guardian/Release Jewel 4" ,
"Drain/Handicraft Jewel 4" ,
"Fortitude/Handicraft Jewel 4" ,
"Crisis/Handicraft Jewel 4" ,
"Ironwall/Handicraft Jewel 4" ,
"Friendship/Handicraft Jewel 4" ,
"Satiated/Handicraft Jewel 4" ,
"Stonethrower/Handicraft Jewel 4" ,
"Resistor/Handicraft Jewel 4" ,
"Flight/Handicraft Jewel 4" ,
"Sprinter/Handicraft Jewel 4" ,
"Refresh/Handicraft Jewel 4" ,
"Jumping/Handicraft Jewel 4" ,
"Sheath/Handicraft Jewel 4" ,
"Gobbler/Handicraft Jewel 4" ,
"Grinder/Handicraft Jewel 4" ,
"Bomber/Handicraft Jewel 4" ,
"Fungiform/Handicraft Jewel 4" ,
"Slider/Handicraft Jewel 4" ,
"Guardian/Handicraft Jewel 4" ,
"Footing/Protection Jewel 4" ,
"Charger/Protection Jewel 4" ,
"Enhancer/Protection Jewel 4" ,
"Destroyer/Protection Jewel 4" ,
"KO/Protection Jewel 4" ,
"Potential/Protection Jewel 4" ,
"Wind Resist/Protection Jewel 4" ,
"Draw/Protection Jewel 4" ,
"Throttle/Protection Jewel 4" ,
"Challenger/Protection Jewel 4" ,
"Flawless/Protection Jewel 4" ,
"Furor/Protection Jewel 4" ,
"Mighty/Protection Jewel 4" ,
"Brace/Protection Jewel 4" ,
"Phoenix/Protection Jewel 4" ,
"Earplug/Protection Jewel 4" ,
"Critical/Protection Jewel 4" ,
"Tenderizer/Protection Jewel 4" ,
"Handicraft/Protection Jewel 4" ,
"Release/Protection Jewel 4" ,
"Footing/Medicine Jewel 4" ,
"Charger/Medicine Jewel 4" ,
"Enhancer/Medicine Jewel 4" ,
"Destroyer/Medicine Jewel 4" ,
"KO/Medicine Jewel 4" ,
"Potential/Medicine Jewel 4" ,
"Wind Resist/Medicine Jewel 4" ,
"Draw/Medicine Jewel 4" ,
"Throttle/Medicine Jewel 4" ,
"Challenger/Medicine Jewel 4" ,
"Flawless/Medicine Jewel 4" ,
"Furor/Medicine Jewel 4" ,
"Mighty/Medicine Jewel 4" ,
"Brace/Medicine Jewel 4" ,
"Phoenix/Medicine Jewel 4" ,
"Earplug/Medicine Jewel 4" ,
"Critical/Medicine Jewel 4" ,
"Tenderizer/Medicine Jewel 4" ,
"Handicraft/Medicine Jewel 4" ,
"Release/Medicine Jewel 4" ,
"Footing/Vitality Jewel 4" ,
"Charger/Vitality Jewel 4" ,
"Enhancer/Vitality Jewel 4" ,
"Destroyer/Vitality Jewel 4" ,
"KO/Vitality Jewel 4" ,
"Potential/Vitality Jewel 4" ,
"Wind Resist/Vitality Jewel 4" ,
"Draw/Vitality Jewel 4" ,
"Throttle/Vitality Jewel 4" ,
"Challenger/Vitality Jewel 4" ,
"Flawless/Vitality Jewel 4" ,
"Furor/Vitality Jewel 4" ,
"Mighty/Vitality Jewel 4" ,
"Brace/Vitality Jewel 4" ,
"Phoenix/Vitality Jewel 4" ,
"Earplug/Vitality Jewel 4" ,
"Critical/Vitality Jewel 4" ,
"Tenderizer/Vitality Jewel 4" ,
"Handicraft/Vitality Jewel 4" ,
"Release/Vitality Jewel 4" ,
"Footing/Maintenance Jewel 4" ,
"Charger/Maintenance Jewel 4" ,
"Enhancer/Maintenance Jewel 4" ,
"Destroyer/Maintenance Jewel 4" ,
"KO/Maintenance Jewel 4" ,
"Potential/Maintenance Jewel 4" ,
"Wind Resist/Maintenance Jewel 4" ,
"Draw/Maintenance Jewel 4" ,
"Throttle/Maintenance Jewel 4" ,
"Challenger/Maintenance Jewel 4" ,
"Flawless/Maintenance Jewel 4" ,
"Furor/Maintenance Jewel 4" ,
"Mighty/Maintenance Jewel 4" ,
"Brace/Maintenance Jewel 4" ,
"Phoenix/Maintenance Jewel 4" ,
"Earplug/Maintenance Jewel 4" ,
"Critical/Maintenance Jewel 4" ,
"Tenderizer/Maintenance Jewel 4" ,
"Handicraft/Maintenance Jewel 4" ,
"Release/Maintenance Jewel 4" ,
"Footing/Physique Jewel 4" ,
"Charger/Physique Jewel 4" ,
"Enhancer/Physique Jewel 4" ,
"Destroyer/Physique Jewel 4" ,
"KO/Physique Jewel 4" ,
"Potential/Physique Jewel 4" ,
"Wind Resist/Physique Jewel 4" ,
"Draw/Physique Jewel 4" ,
"Throttle/Physique Jewel 4" ,
"Challenger/Physique Jewel 4" ,
"Flawless/Physique Jewel 4" ,
"Furor/Physique Jewel 4" ,
"Mighty/Physique Jewel 4" ,
"Brace/Physique Jewel 4" ,
"Phoenix/Physique Jewel 4" ,
"Earplug/Physique Jewel 4" ,
"Critical/Physique Jewel 4" ,
"Tenderizer/Physique Jewel 4" ,
"Handicraft/Physique Jewel 4" ,
"Release/Physique Jewel 4" ,
"Footing/Evasion Jewel 4" ,
"Charger/Evasion Jewel 4" ,
"Enhancer/Evasion Jewel 4" ,
"Destroyer/Evasion Jewel 4" ,
"KO/Evasion Jewel 4" ,
"Potential/Evasion Jewel 4" ,
"Wind Resist/Evasion Jewel 4" ,
"Draw/Evasion Jewel 4" ,
"Throttle/Evasion Jewel 4" ,
"Challenger/Evasion Jewel 4" ,
"Flawless/Evasion Jewel 4" ,
"Furor/Evasion Jewel 4" ,
"Mighty/Evasion Jewel 4" ,
"Brace/Evasion Jewel 4" ,
"Phoenix/Evasion Jewel 4" ,
"Earplug/Evasion Jewel 4" ,
"Critical/Evasion Jewel 4" ,
"Tenderizer/Evasion Jewel 4" ,
"Handicraft/Evasion Jewel 4" ,
"Release/Evasion Jewel 4" ,
"Survival Jewel 1" ,
"Unavailable" ,
"Warming Jewel 2" ,
"Diversion Jewel 3" ,
"Acrobat Jewel 3" ,
"Shaver Jewel 3" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Bamboo Screen (Small)" ,
"Bamboo Screen (Large)" ,
"Intimate Bench" ,
"Intimate Bed" ,
"Intimate Table" ,
"Intimate Chairs" ,
"Steaming Hot Pot" ,
"Intimate Chest" ,
"Felyne Daruma (Red)" ,
"Felyne Daruma (Gold)" ,
"Lucky Felyne" ,
"Lucky Melynx" ,
"Gourds" ,
"Mini Throw Pillows" ,
"Third Fleet Master Painting" ,
"Folding Fan" ,
"Folding Fan (Gold)" ,
"Folding Fan (Pink)" ,
"Intimate Long Desk" ,
"Intimate Dresser" ,
"Intimate Lights" ,
"Hanging Scroll (Hunt)" ,
"Hanging Scroll (Boaboa)" ,
"Hanging Scroll (Slogan)" ,
"Hanging Scroll (Water Oil)" ,
"New World Painting" ,
"Woven Mats (1F)" ,
"Woven Mats (2F)" ,
"Decorative Sword" ,
"Arranged Flowers" ,
"The Comforts of Home" ,
"Preparing for the Journey - Living Quarters" ,
"Dreams of Tomorrow - Private Quarters" ,
"Gorgeous Days - Private Suite" ,
"A Brand New Day" ,
"The Gracious Villagers" ,
"Moga on the Sea" ,
"Harbor of the Sun - Val Habar" ,
"Proof of a Hero - Monster Hunter: World Version" ,
"Guidance" ,
"Pride of a Nameless Hunter" ,
"Succession of Light" ,
"Tales Spun through Song" ,
"Saudade" ,
"Save Room" ,
"Black Impact" ,
"A Day in the Town" ,
"Bustlin' Dundorma" ,
"Great Desert Outpost, Loc Lac" ,
"The Lovely Feast" ,
"Savage of the Ancient Forest" ,
"Beast with Fire Upon its Back - Zorah Magdaros" ,
"Even Elder Dragons Tremble - Nergigante" ,
"The Shadow Upon the Tempest - Kushala Daora (World Version)" ,
"Ruler of the Flame - Teostra (World Version)" ,
"Keeper of Hades - Vaal Hazak" ,
"The Invading Tyrant - Bazelgeuse" ,
"Guiding Lamp to the Otherworld" ,
"How Life Springs Anew" ,
"Demonic Glutton - Deviljho: World Version" ,
"The Brilliance that Rules the Everstream - Kulve Taroth: Confrontation" ,
"The Brilliance that Rules the Everstream - Kulve Taroth: Transformation" ,
"The Brilliance that Rules the Everstream - Kulve Taroth: Tremor" ,
"Empress of the Flame - Lunastra: World Version" ,
"From the Rumblings Come a Song" ,
"A Single Bloom in an Eternity" ,
"The Beast Bares Its Fangs - Tigrex: World Version" ,
"The Scorching Blade - Glavenus: World Version" ,
"Brutish Indigo - Brachydios: World Version" ,
"Splendiferous Silver Sovereign - Velkhana" ,
"Golden Mane - Rajang: World Version" ,
"Proof of a Hero: Sebastian Schwartz Remix" ,
"The Merry Band: The Sound Room Remix" ,
"Spark of Blue - Zinogre: Sebastian Schwartz Remix" ,
"Brutish Indigo - Brachydios: The Sound Room Remix" ,
"To The Ones With Life: The Sound Room Remix" ,
"Barley Field Walkway" ,
"Hunter of the Violent Sands" ,
"Cazador Del Monstruo" ,
"Gather Up, Everyone! ~ Sunsnug Isle" ,
"Red Glare in the Darkness - Nargacuga: World Version" ,
"Spark of Blue - Zinogre: World Version" ,
"The Howling Lone Wolf - Yian Garuga: World Version" ,
"Morning Star of the Dark Tide - Namielle" ,
"World's End - Arch-Tempered Nergigante" ,
"Brutish Indigo Rages" ,
"The Emperor Emerges From Under the Veil" ,
"For the Emperor's Amusement" ,
"Proof of a Hero (MH Swing)" ,
"Ruler of the Flame - Teostra (MH Swing)" ,
"Splendid Bed" ,
"Towering Desserts" ,
"Melynx Doll" ,
"Splendid Silver Pot" ,
"Splendid Gold Pot" ,
"Plum Flower Pot" ,
"Decorative Tree" ,
"Flower Decoration (Small)" ,
"Flower Decoration (Large)" ,
"Tropical Planting" ,
"Fun Fright Pumpkins" ,
"Model Fifth Fleet Ship" ,
"Model Modified Ship" ,
"Model Research Base" ,
"Model Base Camp" ,
"Graceful Tea Set" ,
"Dark Pot" ,
"Earth Tone Pot" ,
"Rathalos Mask" ,
"Rathian Mask" ,
"Kulu-Ya-Ku Mask" ,
"Ghostly Fun Fright Ornament" ,
"Felyne Balloon" ,
"Grimalkyne Balloon (White)" ,
"Grimalkyne Balloon (Black)" ,
"Gajalaka Balloon" ,
"Hanging Rathalos Mask" ,
"Hanging Rathian Mask" ,
"Hanging Kulu-Ya-Ku Mask" ,
"Palico Portraits 2" ,
"Palico Portraits 3" ,
"Palico Portraits 4" ,
"Break Time Sketch" ,
"Ancient Forest Flora Painting" ,
"Still Life Painting" ,
"Splendid Dresser" ,
"Familiar Lights (Yellow)" ,
"Familiar Lights (White)" ,
"Faint Lights" ,
"Luxury Lights (White)" ,
"Cute Lights (Blue)" ,
"Cute Lights (White)" ,
"Simple Lights (Yellow)" ,
"Simple Lights (White)" ,
"Splendid Lights" ,
"Chandeliers" ,
"Poogie Lanterns" ,
"Joyful Lanterns" ,
"Sky Lantern Lights" ,
"Splendid Wall Shelf (Large)" ,
"Splendid Wall Shelf (Small)" ,
"Hoarfrost Reach Painting 2" ,
"New World Maps" ,
"Palico Portraits 5" ,
"Fun Fright Cloth" ,
"1st Fleet Banner" ,
"2nd Fleet Banner" ,
"3rd Fleet Banner" ,
"4th Fleet Banner" ,
"5th Fleet Banner" ,
"Wildlife Painting" ,
"Astera Painting" ,
"Council Meeting Portrait" ,
"Playtime Portrait" ,
"Splendid Rugs (1F)" ,
"Splendid Rugs (2F)" ,
"Paper Lantern" ,
"Poogie Lamp" ,
"Round Paper Lanterns" ,
"Pumpkin Lantern" ,
"Research Set" ,
"Kitchen Set" ,
"Rathalos Bust" ,
"Treasure Chest" ,
"Flower Decoration (XL)" ,
"Giant Stuffed Felyne Doll" ,
"Giant Stuffed Poogie Doll" ,
"Giant Stuffed Grimalkyne Doll" ,
"Equipment Display" ,
"Unavailable" ,
"Unavailable" ,
"Scoutfly Cage" ,
"Shieldspire Stooge" ,
"Great Jagras Figure" ,
"Nergigante Figure" ,
"Kushala Daora Figure" ,
"Dodogama Figure" ,
"Rathalos Figure" ,
"Anjanath Figure" ,
"Elegant Floor (Blue)" ,
"Elegant Floor (Green)" ,
"Elegant Floor (White)" ,
"Elegant Floor (Gold)" ,
"Cute Floor (Blue)" ,
"Cute Floor (Green)" ,
"Cute Floor (Gray)" ,
"Luxury Wood Floor" ,
"Straw Floor (Green)" ,
"Straw Floor (Brown)" ,
"Wooden Floor (Black)" ,
"Bamboo Floor (Green)" ,
"Bamboo Floor (Brown)" ,
"Ceramic Tile Floor (Blue)" ,
"Ceramic Tile Floor (Peach)" ,
"Ceramic Tile Floor (Aqua)" ,
"Striped Wall (Peach)" ,
"Striped Wall (Gray)" ,
"Striped Wall (Yellow)" ,
"Ceramic Tile Wall (Blue)" ,
"Ceramic Tile Wall (Gray)" ,
"Ceramic Tile Wall (Pastel)" ,
"Luxury Patterned Wall (Gold)" ,
"Luxury Patterned Wall (Blue)" ,
"Luxury Patterned Wall (Red)" ,
"Luxury Patterned Wall (Green)" ,
"Splendid Wall" ,
"Wooden Wall (Black)" ,
"Stucco Wall (Clay)" ,
"Bamboo Wall (Green)" ,
"Bamboo Wall (Brown)" ,
"Marble Wall (Gray)" ,
"Splendid Sofa" ,
"Joyful Platter" ,
"Luxury Platter" ,
"Full Bloom Platter" ,
"Sizzling Spice Platter" ,
"Tobi-Kadachi Figure" ,
"Barioth Figure" ,
"Banbaro Figure" ,
"Boaboa Tribe Figures" ,
"Velkhana Figure" ,
"Legiana Figure" ,
"Beotodus Figure" ,
"Nargacuga Figure" ,
"Pukei-Pukei Figure" ,
"Grimalkyne Figures" ,
"Glavenus Figure" ,
"Rathian Figure" ,
"Kulu-Ya-Ku Figure" ,
"Zinogre Figure" ,
"Yian Garuga Figure" ,
"Great Girros Figure" ,
"Tigrex Figure" ,
"Odogaron Figure" ,
"Radobaan Figure" ,
"Namielle Figure" ,
"Paolumu Figure" ,
"Tzitzi-Ya-Ku Figure" ,
"Rajang Figure" ,
"Kirin Figure" ,
"Lunastra Figure" ,
"Vaal Hazak Figure" ,
"Teostra Figure" ,
"Gajalaka Figures" ,
"Brachydios Figure" ,
"Uragaan Figure" ,
"Lavasioth Figure" ,
"Grand Appreciation Figure" ,
"Marble Wall (White)" ,
"Marble Floor (White)" ,
"Green Herb" ,
"Red Herb" ,
"Blue Herb" ,
"First Aid Sprays" ,
"Mr. Raccoon" ,
"Creepy Rugs (1F)" ,
"Creepy Rugs (2F)" ,
"S.T.A.R.S. Plaque Set 1" ,
"S.T.A.R.S. Plaque Set 2" ,
"Typewriter" ,
"Item Box" ,
"Fun Fright Platter" ,
"Gold Poogie" ,
"Joyful Snowman" ,
"Appreciative Snowman" ,
"Blooming Snowman" ,
"Sizzling Snowman" ,
"Frightful Snowman" ,
"Sky Lanterns" ,
"Splendid Flag" ,
"Hanging Assorted Flowers" ,
"Glowing Fun Fright Ornament" ,
"Relief" ,
"Admiral Painting" ,
"Splendid Wall Hanging" ,
"Palico Portraits 6" ,
"Poogie Painting 2" ,
"Masterpiece Sketches" ,
"Showy Rugs (1F)" ,
"Showy Rugs (2F)" ,
"Pukei-Pukei Decoration" ,
"Fun Fright Stooge" ,
"Jyuratodus Figure" ,
"Barroth Figure" ,
"Diablos Figure" ,
"Safi'jiiva Figure" ,
"Xeno'jiiva Figure" ,
"Wulg Figures" ,
"Herbivore Figures" ,
"Kulve Taroth Figure" ,
"Bazelgeuse Figure" ,
"Deviljho Figure" ,
"Shara Ishvalda Figure 1" ,
"Shara Ishvalda Figure 2" ,
"Alatreon Figure" ,
"Fatalis Figure" ,
"The Bustling Heart of the Snowy Village (MH Swing)" ,
"Scat Cat Fever (MH Swing)" ,
"In Search of Hidden Springs (MH Swing)" ,
"Scat Cat Fever" ,
"Felyne Soup Strategy!" ,
"Chime from a Shimmering Bell - Alatreon: World version" ,
"A Day on Pokke Farm (MH The Jazz)" ,
"Felynes of Yukumo Farm (MH The Jazz)" ,
"The Hunters' Secret Spring (MH The Jazz)" ,
"Winds of Adventure (MH The Jazz)" ,
"Proof of a Hero (MH The Jazz)" ,
"The Legend Descends - Fatalis: World Version" ,
"Limitless Courage" ,
"The Final Confrontation" ,
"Boaboa Feast" ,
"Popo Sculpture" ,
"Boaboa Raft" ,
"Friendly Gift" ,
"Green Pukei-Pukei Plushie" ,
"Coral Pukei-Pukei Plushie" ,
"Palico Portraits 7" ,
"Pukei-Pukei Portrait" ,
"Boaboa Hut" ,
"Felyne Statues" ,
"Grimalkyne Mud Sculptures" ,
"Popo Sculptures" ,
"Beotodus Skull" ,
"Boaboa Gear" ,
"Lynian Gathering!" ,
"Lumu Doll (White)" ,
"Lumu Doll (Purple)" ,
"Moly Doll" ,
"Moly Doll (Green)" ,
"Moly Doll (Yellow)" ,
"Moly Doll (Peach)" ,
"Moly Doll (Black)" ,
"Moly Doll (Red)" ,
"Moly Doll (White)" ,
"Fatalis Painting" ,
"Rajang Doll (Black)" ,
"Rajang Doll (Gold)" ,
"Schrade Banner" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Freezer Ticket" ,
"Pearlspring Ticket" ,
"Snowball" ,
"Snowman" ,
"Namielle Ticket" ,
"Unavailable" ,
"Velkhana Ticket" ,
"Frostfang Ticket" ,
"Green Herb" ,
"Red Herb" ,
"Mixed Herb (G+R)" ,
"Steel Melding Ticket" ,
"Silver Melding Ticket" ,
"Steel Melding Feystone" ,
"Silver Melding Feystone" ,
"Gold Melding Ticket" ,
"Astral Melding Ticket" ,
"Gold Melding Feystone" ,
"Astral Melding Feystone" ,
"Dragonforce Chunk" ,
"Unavailable" ,
"Dracolite Shard" ,
"Dracolite" ,
"Large Dracolite" ,
"Rigid Dracolite" ,
"Pure Dracolite" ,
"Silversnow Pelt" ,
"Bergcrusher Claw" ,
"Silverwhite Frostfang" ,
"Black Eagle Blueprint" ,
"Wiggler Pot" ,
"S.T.A.R.S. Badge" ,
"HARDUMMY" ,
"HARDUMMY" ,
"HARDUMMY" ,
"Joyful Ticket" ,
"Penguin Ticket" ,
"Sealed Dragon Cloth" ,
"Buff Ticket" ,
"Pickaxe Ticket" ,
"Gratitude Ticket" ,
"Wyverian Ticket" ,
"Fest Ticket" ,
"Meaty Canteen Ticket" ,
"Azure Era Seal" ,
"Large Azure Era Gem" ,
"Full Bloom Ticket" ,
"Whetfish Ticket" ,
"Downy Crake Ticket II" ,
"Sizzling Spice Ticket" ,
"Shepherd Hare Ticket" ,
"Spirited Canteen Ticket" ,
"Fun Fright Ticket" ,
"Black Bandana" ,
"Scarf Ticket" ,
"Unity Symbol" ,
"Unavailable" ,
"Goldspring Ticket" ,
"Large Beast Tear" ,
"Magnificent Pelt" ,
"VIP Joyful Ticket" ,
"VIP Gratitude Ticket" ,
"VIP Full Bloom Ticket" ,
"VIP Sizzling Spice Ticket" ,
"VIP Fun Fright Ticket" ,
"Banishing Ball" ,
"Unavailable" ,
"Dragonforce Chunk (Sword)" ,
"Dragonforce Chunk (Blade)" ,
"Dragonforce Chunk (Fang)" ,
"Dragonforce Chunk (Claws)" ,
"Dragonforce Chunk (Snout)" ,
"Dragonforce Chunk (Buster)" ,
"Dragonforce Chunk (Crusher)" ,
"Dragonforce Chunk (Horn)" ,
"Dragonforce Chunk (Axe)" ,
"Dragonforce Chunk (Shield)" ,
"Dragonforce Chunk (Spear)" ,
"Dragonforce Chunk (Shot)" ,
"Dragonforce Chunk (Cannon)" ,
"Dragonforce Chunk (Bow)" ,
"Fatalis Shard" ,
"Fatalis Cortex" ,
"Fatalis Pectus" ,
"Fatalis Hardhorn" ,
"Fatalis Evil Eye" ,
"Fatalis Fellwing" ,
"Herbivore Ticket I" ,
"Herbivore Ticket II" ,
"Inner Eye Ticket" ,
"Buff Ticket+" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable" ,
"Zinogre Ticket" ,
"Brute Tigrex Ticket" ,
"Unavailable" ,
"Unavailable" ,
"Unavailable"};
        public string[] MapNames = {"Infinity of Nothing" , "Ancient Forest" , "Wildspire Waste" , "Coral Highlands" ,
            "Rotten Vale" , "Elder Recess" , "Great Ravine" , "Great Ravine (Story Map to Coral Highlands)" , "Hoarfrost Reach", "Guiding Lands", "Infinity of Nothing" ,
            "Special Arena" , "Arena (Challenge)" ,"IB Arena (Seliana Supply Cache)",  "Astera" , "Gathering Hub (Astera)" , "Research Base" , "Seliana", "Gathering Hub (Seliana)", "307 Unconfirmed/To Be Tested","311 Unconfirmed/To Be Tested","Crashes game" , "Ancient Forest (Flooded / Intro)" ,
            "Everstream" , "Confluence of Fates" , "Ancient Forest (Tutorial)" , "Infinity of Nothing" , "Debug Map" , "Caverns of El Dorado" , "Origin Isle (Cutscene)?","Seliana Supply Cache","Origin Isle (Ruiner Nerg Fight)","Origin Isle (Shara Fight)","Ancient Forest (Legiana Track Quest)",
            "Secluded Valley","Alatreon's Stage","Castle Schrade","Living Quarters" , "Private Quarters" , "Private Suite" , "Training Camp" , "Chamber of Five","Seliana House" };
        public string[] TimeList = {"Match universal", "Start late in the night", "Start at dawn", "Start early in the day",
            "Start at noon", "Start late in the day", "Start at dusk", "Start early in the night",
            "Start at midnight", "Pause day/night cicle once the quest has been initiated"};
        public string[] WeatherList = { "Random", "Disable Weather", "Always Weather A", "Always Weather B" };
        public string[] IconList = { "Anjanath" ,
"Great Jagras" ,
"Pukei-Pukei" ,
"Nergigante" ,
"Xeno'jiiva" ,
"Xeno'jiiva" ,
"Zorah Magdaros" ,
"Kulu-Ya-Ku" ,
"Tzitzi-Ya-Ka" ,
"Jyuratodus" ,
"Tobi-Kadachi" ,
"Paolumu" ,
"Legiana" ,
"Great Girros" ,
"Odogaron" ,
"Radobaan" ,
"Vaal Hazak" ,
"Dodogama" ,
"Kulve Tarroth" ,
"Bazelgeuse" ,
"Behemoth" ,
"Leshen" ,
"Ancient Leshen" ,
"17 EMPTY" ,
"Rathian" ,
"Pink Rathian" ,
"Rathalos" ,
"Azure Rathalos" ,
"Diablos" ,
"Black Diablos" ,
"Kirin" ,
"1F EMPTY" ,
"Kushala Daora" ,
"Lunastra" ,
"Teostra" ,
"Lavasioth" ,
"Deviljho" ,
"Barroth" ,
"Uragaan" ,
"27 EMPTY" ,
"Beotodus" ,
"Coral Pukei-Pukei" ,
"Viper Tobi-Kadachi" ,
"Fulgur Anjanath" ,
"Nightshade Paolumu" ,
"Ebony Odogaron" ,
"Barioth" ,
"Nargacuga" ,
"Skull (Monster near death)" ,
"Hungry/Exhausted (Monster)" ,
"Boaboa" ,
"Gajalaka" ,
"Palico" ,
"Grymalkine" ,
"(Special) Assignment Map icon" ,
"'unknown monster' icon" ,
"UNIDENTIFIED" ,
"UNIDENTIFIED small scoutly icon?" ,
"bigger scoutfly icon" ,
"number 3 as seen when multiple monsters of the same kind appear" ,
"number 4" ,
"number 5" ,
"number 1" ,
"number 2" ,
"Palico/Grymalkine trap marker" ,
"41 EMPTY" ,
"Egg Delivery" ,
"Delivery" ,
"Scarred Yian Garuga" ,
"Banbaro" ,
"Glavenus" ,
"Acidic Glavenus" ,
"Brachydios" ,
"Tigrex" ,
"Velkhana" ,
"Namielle" ,
"Shara" ,
"Shrieking Legiana" ,
"Seething Bazelgeuse" ,
"Savage Deviljho" ,
"Ruiner Nergigante" ,
"Black Veil Vaal Hazak" ,
"Brute Tigrex" ,
"Zinogre" ,
"Stygian Zinogre" ,
"Yian Garuga" ,
"Gold Rathian" ,
"Silver Rathalos" ,
"Aptonoth" ,
"Apceros" ,
"Kelbi 1" ,
"Kelbi 2" ,
"Mosswine" ,
"Hornetaur" ,
"Vespoid" ,
"Gajau" ,
"Jagras" ,
"Mernos" ,
"Kestodon 1" ,
"Kestodon 2" ,
"Raphinos" ,
"Shamos" ,
"Barnos" ,
"Girros" ,
"Popo" ,
"Gastodon" ,
"Noios" ,
"Anteka" ,
"Magmacore ?" ,
"broken pillar" ,
"Barrel 1" ,
"Barrel 2" ,
"Wulg" ,
"Cortos" ,
"Training cart" ,
"73 EMPTY" ,
"74 EMPTY" ,
"75 EMPTY" ,
"76 EMPTY" ,
"77 EMPTY" ,
"Rajang" ,
"Furious Rajang" ,
"Raging Brachydios" ,
"Safi'jiiva" ,
"Alatreon" ,
"Frostfang Barioth" ,
"Fatalis" ,
"No Icon" };
        public string[] QuestTypeList = {"Hunting quest (Table spawn)","Slaying quest (Table spawn)","Capture quest (Table spawn)",
            "Delivery quest (Table spawn)","Hunting quest (Sequential spawn)","Special quest (Table spawn)"};
        public string[] SeqSpawnRules = { "Force spawn", "?", "?", "Spawn if the map is empty", "?", "Retarded spawn", "Block spawn" };
        public string[] ObjectiveList = { "None", "Multi monster quest", "Deliver", "Capture", "Slay", "Hunt" };
        public string[] HRRqlst = { "29", "30", "49", "50", "100" };
        public string[] QCMusicList = { "Defualt", "Elder Dragon Clear", "Ridge Zorah Clear", "Kulve Taroth", "Final Fantasy", "Leshen", "Ancient Leshen", "AT nergigante", "Resident Evil", "09 unused?", "MR Kulve Taroth", "Alatreon (MHTri clear music)", "Fatalis" };
        #endregion
        #region Monster Stats Strings
        public string[] MonsterNames = { "None", "Anjanath" , "Rathalos" , "[s] Aptonoth" , "[s] Jagras" , "Zorah Magdaros" , "[s] Mosswine" , "[s] Gajau" , "Great Jagras" , "[s] Kestodon M" , "Rathian" , "Pink Rathian" , "Azure Rathalos" , "Diablos" ,
            "Black Diablos" , "Kirin" , "Behemoth" , "Kushala Daora" , "Lunastra" , "Teostra" , "Lavasioth" , "Deviljho" , "Barroth" , "Uragaan" , "Leshen" , "Pukei-Pukei" , "Nergigante" , "Xeno'Jiiva" , "Kulu-Ya-Ku" , "Tzitzi-Ya-Ku" ,
            "Jyuratodus" , "Tobi-Kadachi" , "Paolumu" , "Legiana" , "Great Girros" , "Odogaron" , "Radobaan" , "Vaal Hazak" , "Dodogama" , "Kulve Taroth" , "Bazelgeuse" , "[s] Apceros" , "[s] Kelbi M" , "[s[ Kelbi F" , "[s] Hornetaur" ,
            "[s] Vespoid" , "[s] Mernos" , "[s] Kestodon F" , "[s] Raphinos" , "[s] Shamos" , "[s] Barnos" , "[s] Girros" , "Ancient Leshen" , "[s] Gastodon" , "[s] Noios" , "[s] Magmacore 1" , "[s] Magmacore 2" , "[s] Gajalaka" ,
            "[s] Small Barrel" , "[s] Large Barrel" , "[s] Training Pole" , "NON-VALID" , "Tigrex (IB)" , "Nargacuga (IB)" , "Barioth (IB)" , "Savage Deviljho (IB)" , "Brachydios (IB)" , "Glavenus (IB)" , "Acidic Glavenus (IB)" , 
            "Fulgur Anjanath (IB)" , "Coral Pukei-Pukei (IB)" , "Ruiner Nergigante (IB)" , "Viper Tobi-Kadachi (IB)" , "Nightshade Paolumu (IB)" , "Shrieking Legiana (IB)" , "Ebody Odogaron (IB)" , "Blackveil Vaal Hazak (IB)" ,
            "Seething Bazelgeuse (IB)" , "Beotodus (IB)" , "Banbaro (IB)" , "Velkhana (IB)" , "Namielle (IB)" , "Shara Ishvalda (IB)" , "[s] Popo (IB)" , "[s] Anteka (IB)" , "[s] Wulg (IB)" , "[s] Cortos (IB)" , "[s] Boaboa (IB)" ,
            "Alatreon (IB)" , "Gold Rathian (IB)" , "Silver Rathalos (IB)" , "Yian Garuga (IB)" , "Rajang (IB)" , "Furious Rajang (IB)" , "Brute Tigrex (IB)" , "Zinogre (IB)" , "Stygian Zinogre (IB)" , "Raging Brachydios (IB)" , "Safi'Jiiva (IB)" , "[s] Wood Dummy (IB)" ,
            "Scarred Yian Garuga (IB)","Frostfang Barioth (IB)", "Fatalis (IB)"};
        public string[] SmollMonHP = { "10%" ,
"13%" ,
"16%" ,
"19%" ,
"22%" ,
"25%" ,
"28%" ,
"31%" ,
"34%" ,
"37%" ,
"40%" ,
"43%" ,
"46%" ,
"49%" ,
"52%" ,
"55%" ,
"58%" ,
"61%" ,
"64%" ,
"67%" ,
"70%" ,
"73%" ,
"76%" ,
"79%" ,
"82%" ,
"85%" ,
"88%" ,
"91%" ,
"94%" ,
"97%" ,
"100%" ,
"103%" ,
"106%" ,
"109%" ,
"112%" ,
"115%" ,
"118%" ,
"121%" ,
"124%" ,
"127%" ,
"130%" ,
"133%" ,
"136%" ,
"139%" ,
"142%" ,
"145%" ,
"148%" ,
"151%" ,
"154%" ,
"157%" ,
"160%" ,
"163%" ,
"166%" ,
"169%" ,
"172%" ,
"175%" ,
"178%" ,
"181%" ,
"184%" ,
"187%" ,
"190%" ,
"193%" ,
"196%" ,
"199%" ,
"202%" ,
"205%" ,
"208%" ,
"211%" ,
"214%" ,
"217%" ,
"220%" ,
"223%" ,
"226%" ,
"229%" ,
"232%" ,
"235%" ,
"238%" ,
"241%" ,
"244%" ,
"247%" ,
"250%" ,
"260%" ,
"270%" ,
"280%" ,
"290%" ,
"300%" ,
"310%" ,
"320%" ,
"330%" ,
"340%" ,
"350%" ,
"360%" ,
"500%" ,
"335%" ,
"390%" ,
"395%" ,
"370%" ,
"450%" ,
"450%" ,
"745%" ,
"100%" ,
"300%" ,
"325%" ,
"350%" ,
"375%" ,
"400%" ,
"425%" ,
"450%" ,
"475%" ,
"500%" ,
"100%" ,
"560%" ,
"565%" ,
"570%" ,
"575%" ,
"580%" ,
"585%" ,
"590%" ,
"595%" ,
"600%" ,
"100%" ,
"590%" ,
"595%" ,
"600%" ,
"605%" ,
"610%" ,
"615%" ,
"620%" ,
"625%" ,
"630%" ,
"100%" ,
"620%" ,
"625%" ,
"630%" ,
"635%" ,
"640%" ,
"645%" ,
"650%" ,
"655%" ,
"660%" ,
"100%" ,
"620%" ,
"625%" ,
"630%" ,
"635%" ,
"640%" ,
"645%" ,
"650%" ,
"655%" ,
"660%" ,
"100%" ,
"620%" ,
"625%" ,
"630%" ,
"635%" ,
"640%" ,
"645%" ,
"650%" ,
"655%" ,
"660%" ,
"100%" ,
"680%" ,
"685%" ,
"690%" ,
"695%" ,
"700%" ,
"705%" ,
"710%" ,
"715%" ,
"720%" ,
"100%" ,
"285%" ,
"690%" ,
"695%" ,
"700%" ,
"705%" ,
"710%" ,
"500%" ,
"750%" ,
"755%" ,
"760%" ,
"765%" ,
"770%" ,
"345%" ,
"390%" ,
"395%" ,
"400%" ,
"405%" ,
"410%" ,
"375%" ,
"290%" ,
"295%" ,
"300%" ,
"305%" ,
"310%" ,
"405%" ,
"410%" ,
"415%" ,
"420%" ,
"425%" ,
"100%" ,
"420%" ,
"400%" ,
"445%" ,
"450%" ,
"455%" ,
"460%" ,
"465%" ,
"470%" ,
"475%" ,
"300%" ,
"305%" ,
"310%" ,
"315%" ,
"320%" ,
"370%" ,
"375%" ,
"380%" ,
"385%" ,
"390%" ,
"410%" ,
"415%" ,
"420%" ,
"425%" ,
"430%" ,
"410%" ,
"415%" ,
"420%" ,
"425%" ,
"430%" ,
"410%" ,
"415%" ,
"420%" ,
"425%" ,
"430%" ,
"490%" ,
"495%" ,
"500%" ,
"505%" ,
"510%" ,
"450%" ,
"455%" ,
"460%" ,
"465%" ,
"470%" ,
"510%" ,
"515%" ,
"520%" ,
"525%" ,
"530%" ,
"510%" ,
"515%" ,
"520%" ,
"525%" ,
"530%" ,
"810%" ,
"820%" ,
"830%" ,
"840%" ,
"850%" ,
"860%" ,
"870%" ,
"880%" ,
"890%" ,
"900%" ,
"910%" ,
"920%" ,
"930%" ,
"940%" ,
"950%" ,
"960%" ,
"970%" ,
"980%" ,
"990%" ,
"1000%" ,
"1010%" ,
"1020%" ,
"1030%" ,
"1040%" ,
"1050%" ,
"1060%" ,
"1070%" ,
"1080%" ,
"1090%" ,
"1100%" ,
"1110%" ,
"1120%" ,
"1130%" ,
"1140%" ,
"1150%" ,
"1160%" ,
"1170%" ,
"1180%" ,
"1190%" ,
"1200%" ,
"1300%" ,
"1400%" ,
"1500%" ,
"1600%" ,
"1700%" ,
"100%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"600%" ,
"100%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"100%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"100%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"620%" ,
"100%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"100%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"100%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"640%" ,
"100%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"100%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"100%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"660%" ,
"100%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"100%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"100%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"680%" ,
"100%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"100%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"100%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"100%" ,
"700%" ,
"705%" ,
"710%" ,
"715%" ,
"720%" ,
"725%" ,
"730%" ,
"735%" ,
"740%" ,
"100%" ,
"720%" ,
"725%" ,
"730%" ,
"735%" ,
"740%" ,
"745%" ,
"750%" ,
"755%" ,
"760%" ,
"100%" ,
"720%" ,
"725%" ,
"730%" ,
"735%" ,
"740%" ,
"745%" ,
"750%" ,
"755%" ,
"760%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"700%" ,
"100%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"100%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"100%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"720%" ,
"100%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"100%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"100%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"740%" ,
"100%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"100%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"100%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"760%" ,
"100%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"100%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"100%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"780%" ,
"100%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"100%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"100%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"180%" ,
"210%" ,
"240%" ,
"270%" ,
"300%" ,
"330%" ,
"360%" ,
"100%" ,
"205%" ,
"235%" ,
"265%" ,
"295%" ,
"325%" ,
"355%" ,
"385%" ,
"100%" ,
"230%" ,
"260%" ,
"290%" ,
"320%" ,
"350%" ,
"380%" ,
"440%" ,
"100%" ,
"310%" ,
"340%" ,
"370%" ,
"400%" ,
"430%" ,
"460%" ,
"490%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%"};
        public string[] SmollMonAt = { "50%" ,
"65%" ,
"70%" ,
"75%" ,
"85%" ,
"90%" ,
"92%" ,
"94%" ,
"96%" ,
"98%" ,
"100%" ,
"102%" ,
"104%" ,
"106%" ,
"108%" ,
"110%" ,
"112%" ,
"114%" ,
"116%" ,
"118%" ,
"120%" ,
"123%" ,
"126%" ,
"129%" ,
"132%" ,
"135%" ,
"138%" ,
"141%" ,
"144%" ,
"147%" ,
"150%" ,
"155%" ,
"160%" ,
"165%" ,
"170%" ,
"175%" ,
"180%" ,
"185%" ,
"190%" ,
"195%" ,
"200%" ,
"205%" ,
"210%" ,
"215%" ,
"220%" ,
"225%" ,
"230%" ,
"235%" ,
"240%" ,
"245%" ,
"250%" ,
"255%" ,
"260%" ,
"265%" ,
"270%" ,
"275%" ,
"280%" ,
"285%" ,
"290%" ,
"295%" ,
"300%" ,
"305%" ,
"310%" ,
"315%" ,
"320%" ,
"325%" ,
"330%" ,
"335%" ,
"340%" ,
"345%" ,
"350%" ,
"360%" ,
"370%" ,
"380%" ,
"390%" ,
"400%" ,
"410%" ,
"420%" ,
"430%" ,
"440%" ,
"450%" ,
"460%" ,
"470%" ,
"480%" ,
"490%" ,
"500%" ,
"510%" ,
"520%" ,
"530%" ,
"540%" ,
"550%" ,
"560%" ,
"900%" ,
"761%" ,
"760%" ,
"755%" ,
"780%" ,
"760%" ,
"770%" ,
"800%" ,
"100%" ,
"600%" ,
"625%" ,
"650%" ,
"675%" ,
"700%" ,
"725%" ,
"750%" ,
"775%" ,
"800%" ,
"100%" ,
"470%" ,
"475%" ,
"480%" ,
"485%" ,
"490%" ,
"495%" ,
"500%" ,
"505%" ,
"510%" ,
"100%" ,
"680%" ,
"685%" ,
"690%" ,
"695%" ,
"700%" ,
"705%" ,
"710%" ,
"715%" ,
"720%" ,
"100%" ,
"870%" ,
"875%" ,
"880%" ,
"885%" ,
"890%" ,
"895%" ,
"900%" ,
"905%" ,
"910%" ,
"100%" ,
"940%" ,
"945%" ,
"950%" ,
"955%" ,
"960%" ,
"965%" ,
"970%" ,
"975%" ,
"980%" ,
"100%" ,
"1030%" ,
"1035%" ,
"1040%" ,
"1045%" ,
"1050%" ,
"1055%" ,
"1060%" ,
"1065%" ,
"1070%" ,
"100%" ,
"1110%" ,
"1115%" ,
"1120%" ,
"1125%" ,
"1130%" ,
"1135%" ,
"1140%" ,
"1145%" ,
"1150%" ,
"100%" ,
"1200%" ,
"1340%" ,
"1345%" ,
"1350%" ,
"1355%" ,
"1360%" ,
"1320%" ,
"1440%" ,
"1445%" ,
"1450%" ,
"1455%" ,
"1460%" ,
"1440%" ,
"1460%" ,
"1480%" ,
"1500%" ,
"1520%" ,
"1540%" ,
"1560%" ,
"1580%" ,
"1600%" ,
"1620%" ,
"1640%" ,
"1660%" ,
"1680%" ,
"1700%" ,
"1720%" ,
"1740%" ,
"1760%" ,
"100%" ,
"1100%" ,
"1130%" ,
"1840%" ,
"1860%" ,
"1880%" ,
"1900%" ,
"1920%" ,
"1940%" ,
"1960%" ,
"1980%" ,
"2000%" ,
"2020%" ,
"2040%" ,
"2060%" ,
"2080%" ,
"2100%" ,
"2120%" ,
"2140%" ,
"2160%" ,
"2180%" ,
"2200%" ,
"2220%" ,
"2240%" ,
"2260%" ,
"2280%" ,
"2300%" ,
"2320%" ,
"2340%" ,
"2360%" ,
"2380%" ,
"2400%" ,
"2420%" ,
"2440%" ,
"2460%" ,
"2480%" ,
"2500%" ,
"2520%" ,
"2540%" ,
"2560%" ,
"2580%" ,
"2600%" ,
"2620%" ,
"2640%" ,
"2660%" ,
"2680%" ,
"2700%" ,
"2720%" ,
"2740%" ,
"2760%" ,
"2780%" ,
"2800%" ,
"2820%" ,
"2840%" ,
"2860%" ,
"2880%" ,
"2900%" ,
"2920%" ,
"2940%" ,
"2960%" ,
"2980%" ,
"3000%" ,
"3020%" ,
"3040%" ,
"3060%" ,
"3080%" ,
"3100%" ,
"3120%" ,
"3140%" ,
"3160%" ,
"3180%" ,
"3200%" ,
"3220%" ,
"3240%" ,
"3260%" ,
"3280%" ,
"3300%" ,
"3320%" ,
"3340%" ,
"3360%" ,
"3380%" ,
"3400%" ,
"3420%" ,
"3440%" ,
"3460%" ,
"3480%" ,
"3500%" ,
"3520%" ,
"3540%" ,
"3560%" ,
"3580%" ,
"3600%" ,
"3620%" ,
"3640%" ,
"3660%" ,
"3680%" ,
"3700%" ,
"3720%" ,
"3740%" ,
"3760%" ,
"100%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"800%" ,
"100%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"850%" ,
"100%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"900%" ,
"100%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"950%" ,
"100%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"100%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"100%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"100%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"100%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"100%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"100%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"100%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"100%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"100%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"100%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"100%" ,
"1130%" ,
"1135%" ,
"1140%" ,
"1145%" ,
"1150%" ,
"1155%" ,
"1160%" ,
"1165%" ,
"1170%" ,
"100%" ,
"1220%" ,
"1225%" ,
"1230%" ,
"1235%" ,
"1240%" ,
"1245%" ,
"1250%" ,
"1255%" ,
"1260%" ,
"100%" ,
"1290%" ,
"1295%" ,
"1300%" ,
"1305%" ,
"1310%" ,
"1315%" ,
"1320%" ,
"1325%" ,
"1330%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"1000%" ,
"100%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"1050%" ,
"100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"1100%" ,
"100%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"1150%" ,
"100%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"1200%" ,
"100%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"1250%" ,
"100%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"1300%" ,
"100%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"1350%" ,
"100%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"1400%" ,
"100%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"1450%" ,
"100%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"1500%" ,
"100%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"1550%" ,
"100%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"1600%" ,
"100%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"1650%" ,
"100%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"1700%" ,
"100%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"1750%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"430%" ,
"450%" ,
"470%" ,
"490%" ,
"510%" ,
"530%" ,
"550%" ,
"100%" ,
"610%" ,
"640%" ,
"670%" ,
"700%" ,
"730%" ,
"760%" ,
"790%" ,
"100%" ,
"800%" ,
"830%" ,
"860%" ,
"890%" ,
"920%" ,
"950%" ,
"980%" ,
"100%" ,
"870%" ,
"900%" ,
"930%" ,
"960%" ,
"990%" ,
"1020%" ,
"1050%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,};
        public string[] SmollMonEt = {"70%" ,
"75%" ,
"80%" ,
"85%" ,
"90%" ,
"95%" ,
"100%" ,
"105%" ,
"110%" ,
"115%" ,
"120%" ,
"125%" ,
"130%" ,
"135%" ,
"140%" ,
"145%" ,
"150%" ,
"155%" ,
"160%" ,
"165%" ,
"170%" ,
"175%" ,
"180%" ,
"185%" ,
"190%" ,
"195%" ,
"200%" ,
"205%" ,
"210%" ,
"215%" ,
"220%" ,
"225%" ,
"230%" ,
"235%" ,
"240%" ,
"245%" ,
"250%" ,
"255%" ,
"260%" ,
"265%" ,
"270%" ,
"275%" ,
"280%" ,
"285%" ,
"290%" ,
"295%" ,
"300%" ,
"305%" ,
"310%" ,
"315%" ,
"320%" ,
"325%" ,
"330%" ,
"335%" ,
"340%" ,
"345%" ,
"350%" ,
"355%" ,
"360%" ,
"365%" ,
"370%" ,
"375%" ,
"380%" ,
"385%" ,
"390%" ,
"395%" ,
"400%" ,
"405%" ,
"410%" ,
"415%" ,
"420%" ,
"425%" ,
"430%" ,
"435%" ,
"440%" ,
"445%" ,
"450%" ,
"455%" ,
"460%" ,
"465%" ,
"470%" ,
"475%" ,
"480%" ,
"485%" ,
"490%" ,
"495%" ,
"500%" ,
"300%" ,
"300%" ,
"300%" ,
"300%" ,
"300%" ,
"300%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" ,
"100%" };
        #endregion
        private Cipher cipher;
        public byte[] data;
        public byte[] data2 = new byte[1100];
        public byte[] data3 = new byte[1100];
        public byte[] data4;
        public byte[] ReadData;
        public byte[] WriteData;
        public byte[] SaveAsData;
        private readonly string key = "TZNgJfzyD2WKiuV4SglmI6oN5jP2hhRJcBwzUooyfIUTM4ptDYGjuRTP";
        OpenFileDialog ofd = new OpenFileDialog();
        SaveFileDialog sfd = new SaveFileDialog();
        public MainWindow()
        {
            InitializeComponent();
          //  SpawnHelp.Text = "Help and Spawn Notes (mostly from NekotagaYuhatora's comments on the Template): " +
          //      "First and foremost, the quest only uses one of the two options, the Sequential Spawn Rules or the Table Spawn Rules depending on Quest Type, which can be found in " +
          //      "the Common Tab. You can basically ignore the other one or ideally zero all the values in it. The Global Spawn Delay, as the name indicates, is shared between the two. " +
          //      "The Sequential Spawn Rules options are all self explanatory, even if some are not fully understood or explored. The Table Spawn Rules need a bit more explaining, however. " +
          //      "The two deciders, for ";
            ComboBox[] MID = { M1ID, M2ID, M3ID, M4ID, M5ID, M6ID, M7ID };
            TextBox[] MSobj = { M1sobjID, M2sobjID, M3sobjID, M4sobjID, M5sobjID, M6sobjID, M7sobjID };
            TextBox[] MonsterSize = { M1Siz, M2Siz, M3Siz, M4Siz, M5Siz, M6Siz, M7Siz };
            ComboBox[] MHtP = { M1HtP, M2HtP, M3HtP, M4HtP, M5HtP, M6HtP, M7HtP };
            ComboBox[] MAtk = { M1Atk, M2Atk, M3Atk, M4Atk, M5Atk, M6Atk, M7Atk };
            ComboBox[] MDef = { M1Def, M2Def, M3Def, M4Def, M5Def, M6Def, M7Def };
            ComboBox[] MHAR = { M1HAR, M2HAR, M3HAR, M4HAR, M5HAR, M6HAR, M7HAR };
            ComboBox[] MSeT = { M1SeT, M2SeT, M3SeT, M4SeT, M5SeT, M6SeT, M7SeT };
            ComboBox[] MPHP = { M1PHP, M2PHP, M3PHP, M4PHP, M5PHP, M6PHP, M7PHP };
            ComboBox[] MBSt = { M1BSt, M2BSt, M3BSt, M4BSt, M5BSt, M6BSt, M7BSt };
            ComboBox[] MStB = { M1StB, M2StB, M3StB, M4StB, M5StB, M6StB, M7StB };
            ComboBox[] MBKO = { M1BKO, M2BKO, M3BKO, M4BKO, M5BKO, M6BKO, M7BKO };
            ComboBox[] MBEx = { M1BEx, M2BEx, M3BEx, M4BEx, M5BEx, M6BEx, M7BEx };
            ComboBox[] MBMo = { M1BMo, M2BMo, M3BMo, M4BMo, M5BMo, M6BMo, M7BMo };
            ComboBox[] MSSpw = { M1SSpw, M2SSpw, M3SSpw, M4SSpw, M5SSpw };
            ComboBox[] MonIcons = { Icon1, Icon2, Icon3, Icon4, Icon5 };
            ComboBox[] SmlMonIcons = { SmlIcon1, SmlIcon2, SmlIcon3, SmlIcon4, SmlIcon5 };
            ComboBox[] MapIcons = { MapIcon01, MapIcon02, MapIcon03, MapIcon04, MapIcon05,
                MapIcon06, MapIcon07, MapIcon08, MapIcon09, MapIcon10, MapIcon11, MapIcon12,
                MapIcon13, MapIcon14, MapIcon15, MapIcon16, MapIcon17, MapIcon18, MapIcon19,
                MapIcon20, MapIcon21, MapIcon22, MapIcon23, MapIcon24, MapIcon25, MapIcon26,
                MapIcon27, MapIcon28, MapIcon29, MapIcon30, MapIcon31, MapIcon32, MapIcon33,
                MapIcon34, MapIcon35, MapIcon36, MapIcon37, MapIcon38, MapIcon39, MapIcon40,
                MapIcon41, MapIcon42, MapIcon43, MapIcon44, MapIcon45, MapIcon46, MapIcon47,
                MapIcon48, MapIcon49, MapIcon50, MapIcon51 };
            TextBox[] UnknwonValues = { UnknownValue01, UnknownValue01, UnknownValue02, UnknownValue03,
                UnknownValue04, UnknownValue05, UnknownValue06, UnknownValue07, UnknownValue08, UnknownValue09,
                UnknownValue10, UnknownValue11, UnknownValue12, UnknownValue13, UnknownValue14, UnknownValue15,
                UnknownValue16, UnknownValue17, UnknownValue18, UnknownValue19, UnknownValue20, UnknownValue21,
                UnknownValue22, UnknownValue23, UnknownValue24, UnknownValue25, UnknownValue26 };
            #region Common and objective
            for (int i = 0; i < 11; i++)
                Stars.Items.Add(i.ToString() + "*");
            for (int i = 1; i < 7; i++)
                Stars.Items.Add("MR " + i.ToString() + "*");
            Rank.Items.Add("Low Rank");
            Rank.Items.Add("High Rank");
            Rank.Items.Add("Master Rank");
            for (int i = 0; i < MapNames.Length; i++)
                Map.Items.Add(MapNames[i]);
            PSpawn.Items.Add("Forced (Camp 1)");
            PSpawn.Items.Add("Choose (With Drunk Bird)");
            PSpawn.Items.Add("Choose (No Drunk Bird)");
            for (int i = 0; i < TimeList.Length; i++)
                Time.Items.Add(TimeList[i]);
            for (int i = TimeList.Length; i < 256; i++)
                Time.Items.Add("Placeholder Value " + i.ToString());
            for (int i = 0; i < WeatherList.Length; i++)
                Weather.Items.Add(WeatherList[i]);
            for (int i = WeatherList.Length; i < 256; i++)
                Weather.Items.Add("Placeholder Value " + i.ToString());
            HRReq.Items.Add("None");
            for (int i = 1; i < 17; i++)
                HRReq.Items.Add("HR " + i.ToString());
            for (int i = 0; i < HRRqlst.Length; i++)
                HRReq.Items.Add("HR " + HRRqlst[i]);
            for (int i = 1; i < 25; i++)
                HRReq.Items.Add("MR " + i.ToString());
            for (int i = 1; i < 26; i++)
                HRReq.Items.Add("Placeholder "+i.ToString());
            for (int i = 0; i < 3; i++)
                BGM.Items.Add(i.ToString() + " Default");
            BGM.Items.Add("None/Khezu Theme?");
            BGM.Items.Add("Extreme Behemoth?");
            for (int i = 5; i < 21; i++)
                BGM.Items.Add(i.ToString() + " Default?");
            BGM.Items.Add("A Rush of Blood/MM music");
            BGM.Items.Add("Ryu Theme");
            BGM.Items.Add("Sakura Theme");
            BGM.Items.Add("Code:Red/DMC Music");
            for (int i = 25; i < 33; i++)
                BGM.Items.Add(i.ToString() + " Default?");
            BGM.Items.Add("Best of the Best");
            for (int i = 34; i < 256; i++)
                BGM.Items.Add(i.ToString() + " Default?");
            for (int i = 0; i < QCMusicList.Length; i++)
                QCMusic.Items.Add(QCMusicList[i]);
            for (int i = 1; i < (256-QCMusicList.Length); i++)
                QCMusic.Items.Add("Placeholder " + i.ToString());
            for (int i = 0; i < MonIcons.Length; i++)
                for (int j = 0; j < IconList.Length; j++)
                    MonIcons[i].Items.Add(IconList[j]);
            for (int i = 0; i < QuestTypeList.Length; i++)
                QType.Items.Add(QuestTypeList[i]);
            for (int i = 1; i < 5; i++)
                NPlayers.Items.Add(i.ToString());
            for (int i = 0; i < ObjectiveList.Length; i++)
            {
                MObjT1.Items.Add(ObjectiveList[i]);
                MObjT2.Items.Add(ObjectiveList[i]);
                SObjT1.Items.Add(ObjectiveList[i]);
                SObjT2.Items.Add(ObjectiveList[i]);
            }
            #endregion
            #region Monsters, Spawn, and Map Icons
            var assembly = Assembly.GetExecutingAssembly();
            Stream file = assembly.GetManifestResourceStream("Custom_Quest_Editor.Data.em_difficulty.dtt_dif");
            BinaryReader br = new BinaryReader(file);
            float readvalue = 0;
            for (int i = 0; i < 7; i++)
            {
                for (int j = 0; j < MonsterNames.Length; j++)
                    MID[i].Items.Add(MonsterNames[j]);

                for (int j = 0; j < 1000; j++)
                {
                    br.BaseStream.Position = 8 + (j * 36);
                    readvalue = br.ReadSingle();
                    MHtP[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 12 + (j * 36);
                    readvalue = br.ReadSingle();
                    MAtk[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 16 + (j * 36);
                    readvalue = br.ReadSingle();
                    MDef[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    MHAR[i].Items.Add(j.ToString());
                    MSeT[i].Items.Add(j.ToString());
                    br.BaseStream.Position = 20 + (j * 36);
                    readvalue = br.ReadSingle();
                    MPHP[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 24 + (j * 36);
                    readvalue = br.ReadSingle();
                    MBSt[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 28 + (j * 36);
                    readvalue = br.ReadSingle();
                    MStB[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 32 + (j * 36);
                    readvalue = br.ReadSingle();
                    MBKO[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 36 + (j * 36);
                    readvalue = br.ReadSingle();
                    MBEx[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                    br.BaseStream.Position = 40 + (j * 36);
                    readvalue = br.ReadSingle();
                    MBMo[i].Items.Add((Math.Round(readvalue * 100)).ToString() + "%");
                }
            }
            br.Close();
            for (int j = 0; j < 1000; j++)
            {
                sMHP.Items.Add(SmollMonHP[j]);
                sMAt.Items.Add(SmollMonAt[j]);
                sMDe.Items.Add(SmollMonEt[j]);
            }
            for (int i = 0; i < 5; i++)
                for (int j = 0; j < SeqSpawnRules.Length; j++)
                    MSSpw[i].Items.Add(SeqSpawnRules[j]);
            for (int i = 0; i < SmlMonIcons.Length; i++)
            {
                //SmlMonIcons[i].Items.Add("None");
                for (int j = 0; j < IconList.Length; j++)
                    SmlMonIcons[i].Items.Add(IconList[j]);
            }
            for (int i = 0; i < MapIcons.Length; i++)
                for (int j = 0; j < 255; j++)
                    MapIcons[i].Items.Add("Unknown #" + j.ToString());
            #endregion
            }
        private void Open_Click(object sender, RoutedEventArgs e)
        {
            cipher = new Cipher(key);
            ofd.Filter = "MHW Quest File|*.mib";
            if (ofd.ShowDialog() == true)
            {
                SaveM.IsEnabled = true;
                SaveAs.IsEnabled = true;
            }
            else return;
            #region Defenitions
            ComboBox[] MID = { M1ID, M2ID, M3ID, M4ID, M5ID, M6ID, M7ID };
            TextBox[] MSobj = { M1sobjID, M2sobjID, M3sobjID, M4sobjID, M5sobjID, M6sobjID, M7sobjID };
            CheckBox[] Tempered = { M1TFlag, M2TFlag, M3TFlag, M4TFlag, M5TFlag, M6TFlag, M7TFlag };
            TextBox[] MonsterSize = { M1Siz, M2Siz, M3Siz, M4Siz, M5Siz, M6Siz, M7Siz };
            ComboBox[] MHtP = { M1HtP, M2HtP, M3HtP, M4HtP, M5HtP, M6HtP, M7HtP };
            ComboBox[] MAtk = { M1Atk, M2Atk, M3Atk, M4Atk, M5Atk, M6Atk, M7Atk };
            ComboBox[] MDef = { M1Def, M2Def, M3Def, M4Def, M5Def, M6Def, M7Def };
            ComboBox[] MHAR = { M1HAR, M2HAR, M3HAR, M4HAR, M5HAR, M6HAR, M7HAR };
            ComboBox[] MSeT = { M1SeT, M2SeT, M3SeT, M4SeT, M5SeT, M6SeT, M7SeT };
            ComboBox[] MPHP = { M1PHP, M2PHP, M3PHP, M4PHP, M5PHP, M6PHP, M7PHP };
            ComboBox[] MBSt = { M1BSt, M2BSt, M3BSt, M4BSt, M5BSt, M6BSt, M7BSt };
            ComboBox[] MStB = { M1StB, M2StB, M3StB, M4StB, M5StB, M6StB, M7StB };
            ComboBox[] MBKO = { M1BKO, M2BKO, M3BKO, M4BKO, M5BKO, M6BKO, M7BKO };
            ComboBox[] MBEx = { M1BEx, M2BEx, M3BEx, M4BEx, M5BEx, M6BEx, M7BEx };
            ComboBox[] MBMo = { M1BMo, M2BMo, M3BMo, M4BMo, M5BMo, M6BMo, M7BMo };
            ComboBox[] MSSpw = { M1SSpw, M2SSpw, M3SSpw, M4SSpw, M5SSpw };
            ComboBox[] MonIcons = { Icon1, Icon2, Icon3, Icon4, Icon5 };
            ComboBox[] SmlMonIcons = { SmlIcon1, SmlIcon2, SmlIcon3, SmlIcon4, SmlIcon5 };
            ComboBox[] MapIcons = { MapIcon01, MapIcon02, MapIcon03, MapIcon04, MapIcon05,
                MapIcon06, MapIcon07, MapIcon08, MapIcon09, MapIcon10, MapIcon11, MapIcon12,
                MapIcon13, MapIcon14, MapIcon15, MapIcon16, MapIcon17, MapIcon18, MapIcon19,
                MapIcon20, MapIcon21, MapIcon22, MapIcon23, MapIcon24, MapIcon25, MapIcon26,
                MapIcon27, MapIcon28, MapIcon29, MapIcon30, MapIcon31, MapIcon32, MapIcon33,
                MapIcon34, MapIcon35, MapIcon36, MapIcon37, MapIcon38, MapIcon39, MapIcon40,
                MapIcon41, MapIcon42, MapIcon43, MapIcon44, MapIcon45, MapIcon46, MapIcon47,
                MapIcon48, MapIcon49, MapIcon50, MapIcon51 };
            TextBox[] SpawnText = { M6SpC, SpawnDelay, M7SpC, M3SpC, M4SpC, M5SpC, M6SpD, M7SpD };
            TextBox[] ArenaText = { RankA, RankB, RankC, FenCD, FenUT };
            TextBox[] UnknwonValues = { UnknownValue01, UnknownValue01, UnknownValue02, UnknownValue03,
                UnknownValue04, UnknownValue05, UnknownValue06, UnknownValue07, UnknownValue08, UnknownValue09,
                UnknownValue10, UnknownValue11, UnknownValue12, UnknownValue13, UnknownValue14, UnknownValue15,
                UnknownValue16, UnknownValue17, UnknownValue18, UnknownValue19, UnknownValue20, UnknownValue21,
                UnknownValue22, UnknownValue23, UnknownValue24, UnknownValue25, UnknownValue26 };
            #endregion
            data = null;
            //data2 = null;
            data = (File.ReadAllBytes(ofd.FileName));
            ReadData = cipher.Decipher(data);
            for (int i = 4; i < ReadData.Length; i++)
                data2[i - 4] = ReadData[i]; 
            Int32 RV = 0;
            #region Common and Objectives
            QID.Text = BitConverter.ToInt32(new byte[] { data2[6], data2[7], data2[8], data2[9] }, 0).ToString();
            Stars.SelectedIndex = data2[10];
            Rank.SelectedIndex = data2[19];
            RV = BitConverter.ToInt32(new byte[] { data2[23], data2[24], data2[25], data2[26] }, 0);
            for (int i = 0; i < MapIDs.Length; i++)
                if (RV == MapIDs[i])
                    Map.SelectedIndex = i;
            PSpawn.SelectedIndex = data2[27];
            if (data2[31] == 0)
                FSpawn.IsChecked = true;
            else FSpawn.IsChecked = false;
            Time.SelectedIndex = data2[39];
            Weather.SelectedIndex = data2[43];
            Reward.Text = BitConverter.ToUInt32(new byte[] { data2[51], data2[52], data2[53], data2[54] }, 0).ToString();
            Penalty.Text = BitConverter.ToUInt32(new byte[] { data2[55], data2[56], data2[57], data2[58] }, 0).ToString();
            //SReward.Text = BitConverter.ToUInt32(new byte[] { data2[59], data2[60], data2[61], data2[62] }, 0).ToString();
            Timer.Text = BitConverter.ToUInt32(new byte[] { data2[63], data2[64], data2[65], data2[66] }, 0).ToString();
            for (int i = 0; i < 5; i++)
                MonIcons[i].SelectedIndex = BitConverter.ToUInt16(new byte[] { data2[68 + 2 * i], data2[69 + 2 * i] }, 0);
            HRReq.SelectedIndex = data2[78];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
                if (data2[83] == ObjectiveIDs[i])
                    MObjT1.SelectedIndex = i;
            if (data2[84] == 04)
                MObj1MM.IsChecked = true;
            else MObj1MM.IsChecked = false;
            MObjID1.SelectedIndex = BitConverter.ToUInt16(new byte[] { data2[87], data2[88] }, 0);
            MObjC1.Text = BitConverter.ToUInt16(new byte[] { data2[89], data2[90] }, 0).ToString();
            for (int i = 0; i < ObjectiveIDs.Length; i++)
                if (data2[91] == ObjectiveIDs[i])
                    MObjT2.SelectedIndex = i;
            if (data2[92] == 04)
                MObj2MM.IsChecked = true;
            else MObj2MM.IsChecked = false;
            MObjID2.SelectedIndex = BitConverter.ToUInt16(new byte[] { data2[95], data2[96] }, 0);
            MObjC2.Text = BitConverter.ToUInt16(new byte[] { data2[97], data2[98] }, 0).ToString();
            if (data2[99] == 1)
                MultiO.IsChecked = false;
            else MultiO.IsChecked = true;
            for (int i = 0; i < ObjectiveIDs.Length; i++)
                if (data2[100] == ObjectiveIDs[i])
                    SObjT1.SelectedIndex = i;
            if (data2[101] == 04)
                SObj1MM.IsChecked = true;
            else SObj1MM.IsChecked = false;
            SObjID1.SelectedIndex = BitConverter.ToUInt16(new byte[] { data2[104], data2[105] }, 0);
            SObjC1.Text = BitConverter.ToUInt16(new byte[] { data2[106], data2[107] }, 0).ToString();
            for (int i = 0; i < ObjectiveIDs.Length; i++)
                if (data2[108] == ObjectiveIDs[i])
                    SObjT2.SelectedIndex = i;
            if (data2[109] == 04)
                SObj2MM.IsChecked = true;
            else SObj2MM.IsChecked = false;
            SObjID2.SelectedIndex = BitConverter.ToUInt16(new byte[] { data2[112], data2[113] }, 0);
            SObjC2.Text = BitConverter.ToUInt16(new byte[] { data2[114], data2[115] }, 0).ToString();
            BGM.SelectedIndex = data2[120];
            QCMusic.SelectedIndex = data2[124];
            for (int i = 0; i < QuestTypeIDs.Length; i++)
                if (data2[128] == QuestTypeIDs[i])
                    QType.SelectedIndex = i;
            if (data2[130] == 0)
            {
                ATFlag.IsChecked = false;
                PSGear.IsChecked = false;
            }
            if (data2[130] == 1)
            {
                ATFlag.IsChecked = false;
                PSGear.IsChecked = true;
            }
            if (data2[130] == 2)
            {
                ATFlag.IsChecked = true;
                PSGear.IsChecked = false;
            }
            if (data2[130] == 3)
            {
                ATFlag.IsChecked = true;
                PSGear.IsChecked = true;
            }
            RRemID.Text = BitConverter.ToUInt32(new byte[] { data2[132], data2[133], data2[134], data2[135] }, 0).ToString();
            S1RRemID.Text = BitConverter.ToUInt32(new byte[] { data2[136], data2[137], data2[138], data2[139] }, 0).ToString();
            S2RRemID.Text = BitConverter.ToUInt32(new byte[] { data2[140], data2[141], data2[142], data2[143] }, 0).ToString();
            SRemID.Text = BitConverter.ToUInt32(new byte[] { data2[144], data2[145], data2[146], data2[147] }, 0).ToString();
            HRpoint.Text = BitConverter.ToUInt32(new byte[] { data2[160], data2[161], data2[162], data2[163] }, 0).ToString();
            #endregion
            #region Monsters
            for (int i = 0; i < 7; i++)
            {
                if (BitConverter.ToUInt32(new byte[] { data2[172 + 65 * i], data2[173 + 65 * i], data2[174 + 65 * i], data2[175 + 65 * i] }, 0) == 4294967295)
                    MID[i].SelectedIndex = 0;
                else MID[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[172 + 65 * i], data2[173 + 65 * i], data2[174 + 65 * i], data2[175 + 65 * i] }, 0) + 1;
                MSobj[i].Text = BitConverter.ToInt32(new byte[] { data2[176 + 65 * i], data2[177 + 65 * i], data2[178 + 65 * i], data2[179 + 65 * i] }, 0).ToString();
                if (data2[184 + 65 * i] == 0)
                    Tempered[i].IsChecked = false;
                else if (data2[184 + 65 * i] == 1)
                    Tempered[i].IsChecked = true;
                MHtP[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[185 + 65 * i], data2[186 + 65 * i], data2[187 + 65 * i], data2[188 + 65 * i] }, 0);
                MAtk[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[189 + 65 * i], data2[190 + 65 * i], data2[191 + 65 * i], data2[192 + 65 * i] }, 0);
                MDef[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[193 + 65 * i], data2[194 + 65 * i], data2[195 + 65 * i], data2[196 + 65 * i] }, 0);
                MHAR[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[197 + 65 * i], data2[198 + 65 * i], data2[199 + 65 * i], data2[200 + 65 * i] }, 0);
                MSeT[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[205 + 65 * i], data2[206 + 65 * i], data2[207 + 65 * i], data2[208 + 65 * i] }, 0);
                MPHP[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[213 + 65 * i], data2[214 + 65 * i], data2[215 + 65 * i], data2[216 + 65 * i] }, 0);
                MBSt[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[217 + 65 * i], data2[218 + 65 * i], data2[219 + 65 * i], data2[220 + 65 * i] }, 0);
                MStB[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[221 + 65 * i], data2[222 + 65 * i], data2[223 + 65 * i], data2[224 + 65 * i] }, 0);
                MBKO[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[225 + 65 * i], data2[226 + 65 * i], data2[227 + 65 * i], data2[228 + 65 * i] }, 0);
                MBEx[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[229 + 65 * i], data2[230 + 65 * i], data2[231 + 65 * i], data2[232 + 65 * i] }, 0);
                MBMo[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[233 + 65 * i], data2[234 + 65 * i], data2[235 + 65 * i], data2[236 + 65 * i] }, 0);
                MonsterSize[i].Text = BitConverter.ToInt32(new byte[] { data2[201 + 65 * i], data2[202 + 65 * i], data2[203 + 65 * i], data2[204 + 65 * i] }, 0).ToString();
            }
            sMsobj.Text = BitConverter.ToInt32(new byte[] { data2[627], data2[628], data2[629], data2[630] }, 0).ToString();
            sMHP.SelectedIndex = BitConverter.ToInt32(new byte[] { data2[631], data2[632], data2[633], data2[634] }, 0);
            sMAt.SelectedIndex = BitConverter.ToInt32(new byte[] { data2[635], data2[636], data2[637], data2[638] }, 0);
            sMDe.SelectedIndex = BitConverter.ToInt32(new byte[] { data2[639], data2[640], data2[641], data2[642] }, 0);
            MPMod.Text = BitConverter.ToInt32(new byte[] { data2[644], data2[645], data2[646], data2[647] }, 0).ToString();
            #endregion
            #region Spawn, Map Icons, and Arena
            for (int i = 0; i < 5; i++)
                MSSpw[i].SelectedIndex = data2[652 + 4 * i];
            for (int i=0;i<SpawnText.Length;i++)
                SpawnText[i].Text= data2[672 + 4 * i].ToString();
            for (int i=0;i<MapIcons.Length;i++)
                MapIcons[i].SelectedIndex = BitConverter.ToInt32(new byte[] { data2[704 + 4 * i], data2[705 + 4 * i], data2[706 + 4 * i], data2[707 + 4 * i] }, 0);
            for (int i=0;i<5;i++)
            {
                if (data2[908 + 4 * i] == 0)
                    SmlMonIcons[i].SelectedIndex = 127;
                else SmlMonIcons[i].SelectedIndex = data2[928 + 4 * i];
            }
            SetID.Text= BitConverter.ToInt32(new byte[] { data2[948], data2[949], data2[950], data2[951] }, 0).ToString();
            RV = BitConverter.ToInt32(new byte[] { data2[952], data2[952], data2[954], data2[955] }, 0);
            if (RV == 0)
                NPlayers.SelectedIndex = 3;
            else NPlayers.SelectedIndex = RV - 1;
            for (int i = 0; i < 3; i++)
                ArenaText[i].Text = BitConverter.ToInt32(new byte[] { data2[956 + 4 * i], data2[957 + 4 * i], data2[958+4*i], data2[959+4*i] }, 0).ToString();
            if (data2[980] == 128)
                Fence.IsChecked = true;
            for (int i = 0; i < 2; i++)
                ArenaText[3+i].Text = BitConverter.ToInt32(new byte[] { data2[988 + 4 * i], data2[989 + 4 * i], data2[990 + 4 * i], data2[991 + 4 * i] }, 0).ToString();
            #endregion
            #region Iceborne Unknowns
            for (int i = 0; i < 10; i++)
            {
                UnknwonValues[i].Text = BitConverter.ToUInt32(new byte[] { data2[1008 + 4 * i], data2[1009 + 4 * i], data2[1010 + 4 * i], data2[1011 + 4 * i] }, 0).ToString();
            }
            UnknwonValues[10].Text = data2[1048].ToString();
            for (int i = 0; i < 12; i++)
            {
                UnknwonValues[i+11].Text = BitConverter.ToUInt32(new byte[] { data2[1049 + 4 * i], data2[1050 + 4 * i], data2[1051 + 4 * i], data2[1052 + 4 * i] }, 0).ToString();
            }
            for (int i = 0; i < 3; i++)
            {
                    UnknwonValues[i+24].Text = data2[1097+i].ToString();
            }
            #endregion
        }
        private void Save_Click(object sender, RoutedEventArgs e)
        {
            
            data = null;
            //data3 = null;
            data4 = null;
            cipher = new Cipher(key);
            #region Defenitions
            ComboBox[] MID = { M1ID, M2ID, M3ID, M4ID, M5ID, M6ID, M7ID };
            TextBox[] MSobj = { M1sobjID, M2sobjID, M3sobjID, M4sobjID, M5sobjID, M6sobjID, M7sobjID };
            CheckBox[] Tempered = { M1TFlag, M2TFlag, M3TFlag, M4TFlag, M5TFlag, M6TFlag, M7TFlag };
            TextBox[] MonsterSize = { M1Siz, M2Siz, M3Siz, M4Siz, M5Siz, M6Siz, M7Siz };
            ComboBox[] MHtP = { M1HtP, M2HtP, M3HtP, M4HtP, M5HtP, M6HtP, M7HtP };
            ComboBox[] MAtk = { M1Atk, M2Atk, M3Atk, M4Atk, M5Atk, M6Atk, M7Atk };
            ComboBox[] MDef = { M1Def, M2Def, M3Def, M4Def, M5Def, M6Def, M7Def };
            ComboBox[] MHAR = { M1HAR, M2HAR, M3HAR, M4HAR, M5HAR, M6HAR, M7HAR };
            ComboBox[] MSeT = { M1SeT, M2SeT, M3SeT, M4SeT, M5SeT, M6SeT, M7SeT };
            ComboBox[] MPHP = { M1PHP, M2PHP, M3PHP, M4PHP, M5PHP, M6PHP, M7PHP };
            ComboBox[] MBSt = { M1BSt, M2BSt, M3BSt, M4BSt, M5BSt, M6BSt, M7BSt };
            ComboBox[] MStB = { M1StB, M2StB, M3StB, M4StB, M5StB, M6StB, M7StB };
            ComboBox[] MBKO = { M1BKO, M2BKO, M3BKO, M4BKO, M5BKO, M6BKO, M7BKO };
            ComboBox[] MBEx = { M1BEx, M2BEx, M3BEx, M4BEx, M5BEx, M6BEx, M7BEx };
            ComboBox[] MBMo = { M1BMo, M2BMo, M3BMo, M4BMo, M5BMo, M6BMo, M7BMo };
            ComboBox[] MSSpw = { M1SSpw, M2SSpw, M3SSpw, M4SSpw, M5SSpw };
            ComboBox[] MonIcons = { Icon1, Icon2, Icon3, Icon4, Icon5 };
            ComboBox[] SmlMonIcons = { SmlIcon1, SmlIcon2, SmlIcon3, SmlIcon4, SmlIcon5 };
            ComboBox[] MapIcons = { MapIcon01, MapIcon02, MapIcon03, MapIcon04, MapIcon05,
                MapIcon06, MapIcon07, MapIcon08, MapIcon09, MapIcon10, MapIcon11, MapIcon12,
                MapIcon13, MapIcon14, MapIcon15, MapIcon16, MapIcon17, MapIcon18, MapIcon19,
                MapIcon20, MapIcon21, MapIcon22, MapIcon23, MapIcon24, MapIcon25, MapIcon26,
                MapIcon27, MapIcon28, MapIcon29, MapIcon30, MapIcon31, MapIcon32, MapIcon33,
                MapIcon34, MapIcon35, MapIcon36, MapIcon37, MapIcon38, MapIcon39, MapIcon40,
                MapIcon41, MapIcon42, MapIcon43, MapIcon44, MapIcon45, MapIcon46, MapIcon47,
                MapIcon48, MapIcon49, MapIcon50, MapIcon51 };
            TextBox[] SpawnText = { M6SpC, SpawnDelay, M7SpC, M3SpC, M4SpC, M5SpC, M6SpD, M7SpD };
            TextBox[] ArenaText = { RankA, RankB, RankC, FenCD, FenUT };
            TextBox[] UnknwonValues = { UnknownValue01, UnknownValue01, UnknownValue02, UnknownValue03,
                UnknownValue04, UnknownValue05, UnknownValue06, UnknownValue07, UnknownValue08, UnknownValue09,
                UnknownValue10, UnknownValue11, UnknownValue12, UnknownValue13, UnknownValue14, UnknownValue15,
                UnknownValue16, UnknownValue17, UnknownValue18, UnknownValue19, UnknownValue20, UnknownValue21,
                UnknownValue22, UnknownValue23, UnknownValue24, UnknownValue25, UnknownValue26 };
            #endregion
            int MapID = Map.SelectedIndex;
            if (Stars.SelectedIndex < 11)
            {
                for (int i = 0; i < ForbiddenMapIDs.Length; i++)
                {
                    if (ForbiddenMapIDs[i] == MapIDs[MapID])
                    {
                        MessageBox.Show("THIS MAP IS ILLEGAL FOR LOW AND HIGH RANK QUESTS");
                        return;
                    }
                }
                for (int i = 0; i < 7; i++)
                {
                    if (MID[i].SelectedIndex > 61)
                    {
                        MessageBox.Show("Monster #" + (i + 1).ToString() + " IS ILLEGAL FOR LOW AND HIGH RANK QUESTS");
                        return;
                    }
                }
            }
            data = (File.ReadAllBytes(ofd.FileName));
            WriteData = cipher.Decipher(data);
            for (int i = 4; i < WriteData.Length; i++)
                data3[i - 4] = WriteData[i];
            #region Common and Objectives
            byte[] buffer = BitConverter.GetBytes(Convert.ToInt32(QID.Text));
            data3[6] = buffer[0];
            data3[7] = buffer[1];
            data3[8] = buffer[2];
            data3[9] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToByte(Stars.SelectedIndex));
            data3[10] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(Rank.SelectedIndex));
            data3[19] = buffer[0];
            for (int i = 0; i < MapIDs.Length; i++)
            {
                if(Map.SelectedIndex==i)
                {
                    buffer = BitConverter.GetBytes(MapIDs[i]);
                    data3[23] = buffer[0];
                    data3[24] = buffer[1];
                    data3[25] = buffer[2];
                    data3[26] = buffer[3];
                }
            }
            buffer = BitConverter.GetBytes(Convert.ToByte(PSpawn.SelectedIndex));
            data3[27] = buffer[0];
            if (FSpawn.IsChecked == true)
                data3[31] = 0;
            else data3[31] = 1;
            buffer = BitConverter.GetBytes(Convert.ToByte(Time.SelectedIndex));
            data3[39] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(Weather.SelectedIndex));
            data3[43] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Reward.Text));
            data3[51] = buffer[0];
            data3[52] = buffer[1];
            data3[53] = buffer[2];
            data3[54] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Penalty.Text));
            data3[55] = buffer[0];
            data3[56] = buffer[1];
            data3[57] = buffer[2];
            data3[58] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Timer.Text));
            data3[63] = buffer[0];
            data3[64] = buffer[1];
            data3[65] = buffer[2];
            data3[66] = buffer[3];
            for (int i = 0; i < 5; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToUInt16(MonIcons[i].SelectedIndex));
                data3[68 + 2 * i] = buffer[0];
                data3[69 + 2 * i] = buffer[1];
            }
            buffer = BitConverter.GetBytes(Convert.ToByte(HRReq.SelectedIndex));
            data3[78] = buffer[0];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (MObjT1.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[83] = buffer[0];
                }
            }
            if (MObj1MM.IsChecked == true)
                data3[84] = 04;
            else data3[84] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjID1.SelectedIndex));
            data3[87] = buffer[0];
            data3[88] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjC1.Text));
            data3[89] = buffer[0];
            data3[90] = buffer[1];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (MObjT2.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[91] = buffer[0];
                }
            }
            if (MObj2MM.IsChecked == true)
                data3[92] = 04;
            else data3[92] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjID2.SelectedIndex));
            data3[95] = buffer[0];
            data3[96] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjC2.Text));
            data3[97] = buffer[0];
            data3[98] = buffer[1];
            if (MultiO.IsChecked == true)
                data3[99] = 2;
            else data3[99] = 1;
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (SObjT1.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[100] = buffer[0];
                }
            }
            if (SObj1MM.IsChecked == true)
                data3[100] = 04;
            else data3[100] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjID1.SelectedIndex));
            data3[104] = buffer[0];
            data3[105] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjC1.Text));
            data3[106] = buffer[0];
            data3[107] = buffer[1];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (SObjT2.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[108] = buffer[0];
                }
            }
            if (SObj2MM.IsChecked == true)
                data3[109] = 04;
            else data3[109] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjID2.SelectedIndex));
            data3[112] = buffer[0];
            data3[113] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjC2.Text));
            data3[114] = buffer[0];
            data3[115] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToByte(BGM.SelectedIndex));
            data3[120] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(QCMusic.SelectedIndex));
            data3[124] = buffer[0];
            for (int i = 0; i < QuestTypeIDs.Length; i++)
            {
                if (QType.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(QuestTypeIDs[i]);
                    data3[128] = buffer[0];
                }
            }
            data3[130] = Convert.ToByte(2 * Convert.ToInt32(ATFlag.IsChecked) + Convert.ToInt32(PSGear.IsChecked));
            buffer = BitConverter.GetBytes(Convert.ToInt32(RRemID.Text));
            data3[132] = buffer[0];
            data3[133] = buffer[1];
            data3[134] = buffer[2];
            data3[135] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(S1RRemID.Text));
            data3[136] = buffer[0];
            data3[137] = buffer[1];
            data3[138] = buffer[2];
            data3[139] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(S2RRemID.Text));
            data3[140] = buffer[0];
            data3[141] = buffer[1];
            data3[142] = buffer[2];
            data3[143] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(SRemID.Text));
            data3[144] = buffer[0];
            data3[145] = buffer[1];
            data3[146] = buffer[2];
            data3[147] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(HRpoint.Text));
            data3[160] = buffer[0];
            data3[161] = buffer[1];
            data3[162] = buffer[2];
            data3[163] = buffer[3];
            #endregion
            #region Monsters
            for (int i = 0; i < 7; i++)
            {
                if (MID[i].SelectedIndex == 0)
                {
                    data3[172 + 65 * i] = 255;
                    data3[173 + 65 * i] = 255;
                    data3[174 + 65 * i] = 255;
                    data3[175 + 65 * i] = 255;
                }
                else
                {
                    buffer= BitConverter.GetBytes(Convert.ToInt32(MID[i].SelectedIndex-1));
                    data3[172 + 65 * i] = buffer[0];
                    data3[173 + 65 * i] = buffer[1];
                    data3[174 + 65 * i] = buffer[2];
                    data3[175 + 65 * i] = buffer[3];
                }
                buffer = BitConverter.GetBytes(Convert.ToInt32(MSobj[i].Text));
                data3[176 + 65 * i] = buffer[0];
                data3[177 + 65 * i] = buffer[1];
                data3[178 + 65 * i] = buffer[2];
                data3[179 + 65 * i] = buffer[3];
                if (Tempered[i].IsChecked == true)
                    data3[184 + 65 * i] = 1;
                else data3[184 + 65 * i] = 0;
                buffer = BitConverter.GetBytes(Convert.ToInt32(MHtP[i].SelectedIndex));
                data3[185 + 65 * i] = buffer[0];
                data3[186 + 65 * i] = buffer[1];
                data3[187 + 65 * i] = buffer[2];
                data3[188 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MAtk[i].SelectedIndex));
                data3[189 + 65 * i] = buffer[0];
                data3[190 + 65 * i] = buffer[1];
                data3[191 + 65 * i] = buffer[2];
                data3[192 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MDef[i].SelectedIndex));
                data3[193 + 65 * i] = buffer[0];
                data3[194 + 65 * i] = buffer[1];
                data3[195 + 65 * i] = buffer[2];
                data3[196 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MHAR[i].SelectedIndex));
                data3[197 + 65 * i] = buffer[0];
                data3[198 + 65 * i] = buffer[1];
                data3[199 + 65 * i] = buffer[2];
                data3[200 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MSeT[i].SelectedIndex));
                data3[205 + 65 * i] = buffer[0];
                data3[206 + 65 * i] = buffer[1];
                data3[207 + 65 * i] = buffer[2];
                data3[208 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MPHP[i].SelectedIndex));
                data3[213 + 65 * i] = buffer[0];
                data3[214 + 65 * i] = buffer[1];
                data3[215 + 65 * i] = buffer[2];
                data3[216 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBSt[i].SelectedIndex));
                data3[217 + 65 * i] = buffer[0];
                data3[218 + 65 * i] = buffer[1];
                data3[219 + 65 * i] = buffer[2];
                data3[220 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MStB[i].SelectedIndex));
                data3[221 + 65 * i] = buffer[0];
                data3[222 + 65 * i] = buffer[1];
                data3[223 + 65 * i] = buffer[2];
                data3[224 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBKO[i].SelectedIndex));
                data3[225 + 65 * i] = buffer[0];
                data3[226 + 65 * i] = buffer[1];
                data3[227 + 65 * i] = buffer[2];
                data3[228 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBEx[i].SelectedIndex));
                data3[229 + 65 * i] = buffer[0];
                data3[230 + 65 * i] = buffer[1];
                data3[231 + 65 * i] = buffer[2];
                data3[232 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBMo[i].SelectedIndex));
                data3[233 + 65 * i] = buffer[0];
                data3[234 + 65 * i] = buffer[1];
                data3[235 + 65 * i] = buffer[2];
                data3[236 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MonsterSize[i].Text));
                data3[201 + 65 * i] = buffer[0];
                data3[202 + 65 * i] = buffer[1];
                data3[203 + 65 * i] = buffer[2];
                data3[204 + 65 * i] = buffer[3];
            }

            buffer = BitConverter.GetBytes(Convert.ToInt32(sMsobj.Text));
            data3[627] = buffer[0];
            data3[628] = buffer[1];
            data3[629] = buffer[2];
            data3[630] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMHP.SelectedIndex));
            data3[631] = buffer[0];
            data3[632] = buffer[1];
            data3[633] = buffer[2];
            data3[634] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMAt.SelectedIndex));
            data3[635] = buffer[0];
            data3[636] = buffer[1];
            data3[637] = buffer[2];
            data3[638] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMDe.SelectedIndex));
            data3[639] = buffer[0];
            data3[640] = buffer[1];
            data3[641] = buffer[2];
            data3[642] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(MPMod.Text));
            data3[644] = buffer[0];
            data3[645] = buffer[1];
            data3[646] = buffer[2];
            data3[647] = buffer[3];
            #endregion
            #region Spawn, Map Icons, and Arena
            for (int i = 0; i < 5; i++)
                data3[652 + 4 * i] = Convert.ToByte(MSSpw[i].SelectedIndex);
            for (int i = 0; i < SpawnText.Length; i++)
                data3[672 + 4 * i] = Convert.ToByte(SpawnText[i].Text);
            for (int i = 0; i < MapIcons.Length; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(MapIcons[i].SelectedIndex));
                data3[704 + 4 * i] = buffer[0];
                data3[705 + 4 * i] = buffer[1];
                data3[706 + 4 * i] = buffer[2];
                data3[707 + 4 * i] = buffer[3];
            }
            for (int i = 0; i < 5; i++)
            {
                if (SmlMonIcons[i].SelectedIndex == 127)
                {
                    data3[908 + 4 * i] = 0;
                    data3[928 + 4 * i] = 0;
                }
                else
                    data3[928 + 4 * i] = Convert.ToByte(SmlMonIcons[i].SelectedIndex);
            }
            buffer = BitConverter.GetBytes(Convert.ToInt32(SetID.Text));
            data3[948] = buffer[0];
            data3[949] = buffer[1];
            data3[950] = buffer[2];
            data3[951] = buffer[3];
            if (NPlayers.SelectedIndex == 3)
            {
                data3[952] = 0;
                data3[953] = 0;
                data3[954] = 0;
                data3[955] = 0;
            }
            else
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(NPlayers.SelectedIndex+1));
                data3[952] = buffer[0];
                data3[953] = buffer[1];
                data3[954] = buffer[2];
                data3[955] = buffer[3];
            }
            for (int i = 0; i < 3; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(ArenaText[i].Text));
                data3[956 + 4 * i] = buffer[0];
                data3[957 + 4 * i] = buffer[1];
                data3[958 + 4 * i] = buffer[2];
                data3[959 + 4 * i] = buffer[3];
            }
            if (MObj2MM.IsChecked == true)
                data3[980] = 128;
            else data3[980] = 0;

            for (int i = 0; i < 2; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(ArenaText[3+i].Text));
                data3[988 + 4 * i] = buffer[0];
                data3[989 + 4 * i] = buffer[1];
                data3[990 + 4 * i] = buffer[2];
                data3[991 + 4 * i] = buffer[3];
            }
            #endregion
            #region Iceborne Unknowns
            for (int i = 0; i < 10; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i].Text));
                data3[1008 + 4 * i] = buffer[0];
                data3[1009 + 4 * i] = buffer[1];
                data3[1010 + 4 * i] = buffer[2];
                data3[1011 + 4 * i] = buffer[3];
            }
            buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[10].Text));
            data3[1048] = buffer[0];
            for (int i = 0; i < 12; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i + 11].Text));
                data3[1049 + 4 * i] = buffer[0];
                data3[1050 + 4 * i] = buffer[1];
                data3[1051 + 4 * i] = buffer[2];
                data3[1052 + 4 * i] = buffer[3];
            }
            for (int i = 0; i < 3; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i + 24].Text));
                data3[1097 + i] = buffer[0];
            }
            #endregion
            for (int i = 4; i < WriteData.Length; i++)
                WriteData[i] = data3[i - 4];
            data4 = cipher.Encipher(WriteData);
            File.WriteAllBytes(ofd.FileName, data4);
        }
        private void SaveAs_Click(object sender, RoutedEventArgs e)
        {
            data = null;
            //data3 = null;
            data4 = null;
            cipher = new Cipher(key);
            #region Defenitions
            ComboBox[] MID = { M1ID, M2ID, M3ID, M4ID, M5ID, M6ID, M7ID };
            TextBox[] MSobj = { M1sobjID, M2sobjID, M3sobjID, M4sobjID, M5sobjID, M6sobjID, M7sobjID };
            CheckBox[] Tempered = { M1TFlag, M2TFlag, M3TFlag, M4TFlag, M5TFlag, M6TFlag, M7TFlag };
            TextBox[] MonsterSize = { M1Siz, M2Siz, M3Siz, M4Siz, M5Siz, M6Siz, M7Siz };
            ComboBox[] MHtP = { M1HtP, M2HtP, M3HtP, M4HtP, M5HtP, M6HtP, M7HtP };
            ComboBox[] MAtk = { M1Atk, M2Atk, M3Atk, M4Atk, M5Atk, M6Atk, M7Atk };
            ComboBox[] MDef = { M1Def, M2Def, M3Def, M4Def, M5Def, M6Def, M7Def };
            ComboBox[] MHAR = { M1HAR, M2HAR, M3HAR, M4HAR, M5HAR, M6HAR, M7HAR };
            ComboBox[] MSeT = { M1SeT, M2SeT, M3SeT, M4SeT, M5SeT, M6SeT, M7SeT };
            ComboBox[] MPHP = { M1PHP, M2PHP, M3PHP, M4PHP, M5PHP, M6PHP, M7PHP };
            ComboBox[] MBSt = { M1BSt, M2BSt, M3BSt, M4BSt, M5BSt, M6BSt, M7BSt };
            ComboBox[] MStB = { M1StB, M2StB, M3StB, M4StB, M5StB, M6StB, M7StB };
            ComboBox[] MBKO = { M1BKO, M2BKO, M3BKO, M4BKO, M5BKO, M6BKO, M7BKO };
            ComboBox[] MBEx = { M1BEx, M2BEx, M3BEx, M4BEx, M5BEx, M6BEx, M7BEx };
            ComboBox[] MBMo = { M1BMo, M2BMo, M3BMo, M4BMo, M5BMo, M6BMo, M7BMo };
            ComboBox[] MSSpw = { M1SSpw, M2SSpw, M3SSpw, M4SSpw, M5SSpw };
            ComboBox[] MonIcons = { Icon1, Icon2, Icon3, Icon4, Icon5 };
            ComboBox[] SmlMonIcons = { SmlIcon1, SmlIcon2, SmlIcon3, SmlIcon4, SmlIcon5 };
            ComboBox[] MapIcons = { MapIcon01, MapIcon02, MapIcon03, MapIcon04, MapIcon05,
                MapIcon06, MapIcon07, MapIcon08, MapIcon09, MapIcon10, MapIcon11, MapIcon12,
                MapIcon13, MapIcon14, MapIcon15, MapIcon16, MapIcon17, MapIcon18, MapIcon19,
                MapIcon20, MapIcon21, MapIcon22, MapIcon23, MapIcon24, MapIcon25, MapIcon26,
                MapIcon27, MapIcon28, MapIcon29, MapIcon30, MapIcon31, MapIcon32, MapIcon33,
                MapIcon34, MapIcon35, MapIcon36, MapIcon37, MapIcon38, MapIcon39, MapIcon40,
                MapIcon41, MapIcon42, MapIcon43, MapIcon44, MapIcon45, MapIcon46, MapIcon47,
                MapIcon48, MapIcon49, MapIcon50, MapIcon51 };
            TextBox[] SpawnText = { M6SpC, SpawnDelay, M7SpC, M3SpC, M4SpC, M5SpC, M6SpD, M7SpD };
            TextBox[] ArenaText = { RankA, RankB, RankC, FenCD, FenUT };
            TextBox[] UnknwonValues = { UnknownValue01, UnknownValue01, UnknownValue02, UnknownValue03,
                UnknownValue04, UnknownValue05, UnknownValue06, UnknownValue07, UnknownValue08, UnknownValue09,
                UnknownValue10, UnknownValue11, UnknownValue12, UnknownValue13, UnknownValue14, UnknownValue15,
                UnknownValue16, UnknownValue17, UnknownValue18, UnknownValue19, UnknownValue20, UnknownValue21,
                UnknownValue22, UnknownValue23, UnknownValue24, UnknownValue25, UnknownValue26 };
            #endregion
            int MapID = Map.SelectedIndex;
            if (Stars.SelectedIndex < 11)
            {
                for (int i = 0; i < ForbiddenMapIDs.Length; i++)
                {
                    if (ForbiddenMapIDs[i] == MapIDs[MapID])
                    {
                        MessageBox.Show("THIS MAP IS ILLEGAL FOR LOW AND HIGH RANK QUESTS");
                        return;
                    }
                }
                for (int i = 0; i < 7; i++)
                { 
                        if (MID[i].SelectedIndex > 61)
                        {
                            MessageBox.Show("Monster #" + (i + 1).ToString() + " IS ILLEGAL FOR LOW AND HIGH RANK QUESTS");
                            return;
                        }
                }
            }
            data = (File.ReadAllBytes(ofd.FileName));
            WriteData = cipher.Decipher(data);
            for (int i = 4; i < WriteData.Length; i++)
                data3[i - 4] = WriteData[i];
            #region Common and Objectives
            byte[] buffer = BitConverter.GetBytes(Convert.ToInt32(QID.Text));
            data3[6] = buffer[0];
            data3[7] = buffer[1];
            data3[8] = buffer[2];
            data3[9] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToByte(Stars.SelectedIndex));
            data3[10] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(Rank.SelectedIndex));
            data3[19] = buffer[0];
            for (int i = 0; i < MapIDs.Length; i++)
            {
                if (Map.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(MapIDs[i]);
                    data3[23] = buffer[0];
                    data3[24] = buffer[1];
                    data3[25] = buffer[2];
                    data3[26] = buffer[3];
                }
            }
            buffer = BitConverter.GetBytes(Convert.ToByte(PSpawn.SelectedIndex));
            data3[27] = buffer[0];
            if (FSpawn.IsChecked == true)
                data3[31] = 0;
            else data3[31] = 1;
            buffer = BitConverter.GetBytes(Convert.ToByte(Time.SelectedIndex));
            data3[39] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(Weather.SelectedIndex));
            data3[43] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Reward.Text));
            data3[51] = buffer[0];
            data3[52] = buffer[1];
            data3[53] = buffer[2];
            data3[54] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Penalty.Text));
            data3[55] = buffer[0];
            data3[56] = buffer[1];
            data3[57] = buffer[2];
            data3[58] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(Timer.Text));
            data3[63] = buffer[0];
            data3[64] = buffer[1];
            data3[65] = buffer[2];
            data3[66] = buffer[3];
            for (int i = 0; i < 5; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToUInt16(MonIcons[i].SelectedIndex));
                data3[68 + 2 * i] = buffer[0];
                data3[69 + 2 * i] = buffer[1];
            }
            buffer = BitConverter.GetBytes(Convert.ToByte(HRReq.SelectedIndex));
            data3[78] = buffer[0];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (MObjT1.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[83] = buffer[0];
                }
            }
            if (MObj1MM.IsChecked == true)
                data3[84] = 04;
            else data3[84] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjID1.SelectedIndex));
            data3[87] = buffer[0];
            data3[88] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjC1.Text));
            data3[89] = buffer[0];
            data3[90] = buffer[1];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (MObjT2.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[91] = buffer[0];
                }
            }
            if (MObj2MM.IsChecked == true)
                data3[92] = 04;
            else data3[92] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjID2.SelectedIndex));
            data3[95] = buffer[0];
            data3[96] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(MObjC2.Text));
            data3[97] = buffer[0];
            data3[98] = buffer[1];
            if (MultiO.IsChecked == true)
                data3[99] = 2;
            else data3[99] = 1;
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (SObjT1.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[100] = buffer[0];
                }
            }
            if (SObj1MM.IsChecked == true)
                data3[100] = 04;
            else data3[100] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjID1.SelectedIndex));
            data3[104] = buffer[0];
            data3[105] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjC1.Text));
            data3[106] = buffer[0];
            data3[107] = buffer[1];
            for (int i = 0; i < ObjectiveIDs.Length; i++)
            {
                if (SObjT2.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(ObjectiveIDs[i]);
                    data3[108] = buffer[0];
                }
            }
            if (SObj2MM.IsChecked == true)
                data3[109] = 04;
            else data3[109] = 0;
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjID2.SelectedIndex));
            data3[112] = buffer[0];
            data3[113] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToUInt16(SObjC2.Text));
            data3[114] = buffer[0];
            data3[115] = buffer[1];
            buffer = BitConverter.GetBytes(Convert.ToByte(BGM.SelectedIndex));
            data3[120] = buffer[0];
            buffer = BitConverter.GetBytes(Convert.ToByte(QCMusic.SelectedIndex));
            data3[124] = buffer[0];
            for (int i = 0; i < QuestTypeIDs.Length; i++)
            {
                if (QType.SelectedIndex == i)
                {
                    buffer = BitConverter.GetBytes(QuestTypeIDs[i]);
                    data3[128] = buffer[0];
                }
            }
            data3[130] = Convert.ToByte(2 * Convert.ToInt32(ATFlag.IsChecked) + Convert.ToInt32(PSGear.IsChecked));
            buffer = BitConverter.GetBytes(Convert.ToInt32(RRemID.Text));
            data3[132] = buffer[0];
            data3[133] = buffer[1];
            data3[134] = buffer[2];
            data3[135] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(S1RRemID.Text));
            data3[136] = buffer[0];
            data3[137] = buffer[1];
            data3[138] = buffer[2];
            data3[139] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(S2RRemID.Text));
            data3[140] = buffer[0];
            data3[141] = buffer[1];
            data3[142] = buffer[2];
            data3[143] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(SRemID.Text));
            data3[144] = buffer[0];
            data3[145] = buffer[1];
            data3[146] = buffer[2];
            data3[147] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(HRpoint.Text));
            data3[160] = buffer[0];
            data3[161] = buffer[1];
            data3[162] = buffer[2];
            data3[163] = buffer[3];
            #endregion
            #region Monsters
            for (int i = 0; i < 7; i++)
            {
                if (MID[i].SelectedIndex == 0)
                {
                    data3[172 + 65 * i] = 255;
                    data3[173 + 65 * i] = 255;
                    data3[174 + 65 * i] = 255;
                    data3[175 + 65 * i] = 255;
                }
                else
                {
                    buffer = BitConverter.GetBytes(Convert.ToInt32(MID[i].SelectedIndex - 1));
                    data3[172 + 65 * i] = buffer[0];
                    data3[173 + 65 * i] = buffer[1];
                    data3[174 + 65 * i] = buffer[2];
                    data3[175 + 65 * i] = buffer[3];
                }
                buffer = BitConverter.GetBytes(Convert.ToInt32(MSobj[i].Text));
                data3[176 + 65 * i] = buffer[0];
                data3[177 + 65 * i] = buffer[1];
                data3[178 + 65 * i] = buffer[2];
                data3[179 + 65 * i] = buffer[3];
                if (Tempered[i].IsChecked == true)
                    data3[184 + 65 * i] = 1;
                else data3[184 + 65 * i] = 0;
                buffer = BitConverter.GetBytes(Convert.ToInt32(MHtP[i].SelectedIndex));
                data3[185 + 65 * i] = buffer[0];
                data3[186 + 65 * i] = buffer[1];
                data3[187 + 65 * i] = buffer[2];
                data3[188 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MAtk[i].SelectedIndex));
                data3[189 + 65 * i] = buffer[0];
                data3[190 + 65 * i] = buffer[1];
                data3[191 + 65 * i] = buffer[2];
                data3[192 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MDef[i].SelectedIndex));
                data3[193 + 65 * i] = buffer[0];
                data3[194 + 65 * i] = buffer[1];
                data3[195 + 65 * i] = buffer[2];
                data3[196 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MHAR[i].SelectedIndex));
                data3[197 + 65 * i] = buffer[0];
                data3[198 + 65 * i] = buffer[1];
                data3[199 + 65 * i] = buffer[2];
                data3[200 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MSeT[i].SelectedIndex));
                data3[205 + 65 * i] = buffer[0];
                data3[206 + 65 * i] = buffer[1];
                data3[207 + 65 * i] = buffer[2];
                data3[208 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MPHP[i].SelectedIndex));
                data3[213 + 65 * i] = buffer[0];
                data3[214 + 65 * i] = buffer[1];
                data3[215 + 65 * i] = buffer[2];
                data3[216 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBSt[i].SelectedIndex));
                data3[217 + 65 * i] = buffer[0];
                data3[218 + 65 * i] = buffer[1];
                data3[219 + 65 * i] = buffer[2];
                data3[220 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MStB[i].SelectedIndex));
                data3[221 + 65 * i] = buffer[0];
                data3[222 + 65 * i] = buffer[1];
                data3[223 + 65 * i] = buffer[2];
                data3[224 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBKO[i].SelectedIndex));
                data3[225 + 65 * i] = buffer[0];
                data3[226 + 65 * i] = buffer[1];
                data3[227 + 65 * i] = buffer[2];
                data3[228 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBEx[i].SelectedIndex));
                data3[229 + 65 * i] = buffer[0];
                data3[230 + 65 * i] = buffer[1];
                data3[231 + 65 * i] = buffer[2];
                data3[232 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MBMo[i].SelectedIndex));
                data3[233 + 65 * i] = buffer[0];
                data3[234 + 65 * i] = buffer[1];
                data3[235 + 65 * i] = buffer[2];
                data3[236 + 65 * i] = buffer[3];
                buffer = BitConverter.GetBytes(Convert.ToInt32(MonsterSize[i].Text));
                data3[201 + 65 * i] = buffer[0];
                data3[202 + 65 * i] = buffer[1];
                data3[203 + 65 * i] = buffer[2];
                data3[204 + 65 * i] = buffer[3];
            }

            buffer = BitConverter.GetBytes(Convert.ToInt32(sMsobj.Text));
            data3[627] = buffer[0];
            data3[628] = buffer[1];
            data3[629] = buffer[2];
            data3[630] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMHP.SelectedIndex));
            data3[631] = buffer[0];
            data3[632] = buffer[1];
            data3[633] = buffer[2];
            data3[634] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMAt.SelectedIndex));
            data3[635] = buffer[0];
            data3[636] = buffer[1];
            data3[637] = buffer[2];
            data3[638] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(sMDe.SelectedIndex));
            data3[639] = buffer[0];
            data3[640] = buffer[1];
            data3[641] = buffer[2];
            data3[642] = buffer[3];
            buffer = BitConverter.GetBytes(Convert.ToInt32(MPMod.Text));
            data3[644] = buffer[0];
            data3[645] = buffer[1];
            data3[646] = buffer[2];
            data3[647] = buffer[3];
            #endregion
            #region Spawn, Map Icons, and Arena
            for (int i = 0; i < 5; i++)
                data3[652 + 4 * i] = Convert.ToByte(MSSpw[i].SelectedIndex);
            for (int i = 0; i < SpawnText.Length; i++)
                data3[672 + 4 * i] = Convert.ToByte(SpawnText[i].Text);
            for (int i = 0; i < MapIcons.Length; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(MapIcons[i].SelectedIndex));
                data3[704 + 4 * i] = buffer[0];
                data3[705 + 4 * i] = buffer[1];
                data3[706 + 4 * i] = buffer[2];
                data3[707 + 4 * i] = buffer[3];
            }
            for (int i = 0; i < 5; i++)
            {
                if (SmlMonIcons[i].SelectedIndex == 127)
                {
                    data3[908 + 4 * i] = 0;
                    data3[928 + 4 * i] = 0;
                }
                else
                    data3[928 + 4 * i] = Convert.ToByte(SmlMonIcons[i].SelectedIndex);
            }
            buffer = BitConverter.GetBytes(Convert.ToInt32(SetID.Text));
            data3[948] = buffer[0];
            data3[949] = buffer[1];
            data3[950] = buffer[2];
            data3[951] = buffer[3]; if (NPlayers.SelectedIndex == 3)
            {
                data3[952] = 0;
                data3[953] = 0;
                data3[954] = 0;
                data3[955] = 0;
            }
            else
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(NPlayers.SelectedIndex + 1));
                data3[952] = buffer[0];
                data3[953] = buffer[1];
                data3[954] = buffer[2];
                data3[955] = buffer[3];
            }
            for (int i = 0; i < 3; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(ArenaText[i].Text));
                data3[956 + 4 * i] = buffer[0];
                data3[957 + 4 * i] = buffer[1];
                data3[958 + 4 * i] = buffer[2];
                data3[959 + 4 * i] = buffer[3];
            }
            if (MObj2MM.IsChecked == true)
                data3[980] = 128;
            else data3[980] = 0;

            for (int i = 0; i < 2; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(ArenaText[3 + i].Text));
                data3[988 + 4 * i] = buffer[0];
                data3[989 + 4 * i] = buffer[1];
                data3[990 + 4 * i] = buffer[2];
                data3[991 + 4 * i] = buffer[3];
            }
            #endregion
            #region Iceborne Unknowns
            for (int i = 0; i < 10; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i].Text));
                data3[1008 + 4 * i] = buffer[0];
                data3[1009 + 4 * i] = buffer[1];
                data3[1010 + 4 * i] = buffer[2];
                data3[1011 + 4 * i] = buffer[3];
            }
            buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[10].Text));
            data3[1048] = buffer[0];
            for (int i = 0; i < 12; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i + 11].Text));
                data3[1049 + 4 * i] = buffer[0];
                data3[1050 + 4 * i] = buffer[1];
                data3[1051 + 4 * i] = buffer[2];
                data3[1052 + 4 * i] = buffer[3];
            }
            for (int i = 0; i < 3; i++)
            {
                buffer = BitConverter.GetBytes(Convert.ToInt32(UnknwonValues[i + 24].Text));
                data3[1097 + i] = buffer[0];
            }
            #endregion
            for (int i = 4; i < WriteData.Length; i++)
                WriteData[i] = data3[i - 4];
            data4 = cipher.Encipher(WriteData);
            sfd.Filter = "MHW Quest File|*.mib";
            if (QID.Text.Length == 0)
                sfd.FileName = "questData_00000" + QID.Text + ".mib";
            else if (QID.Text.Length == 1)
                sfd.FileName = "questData_0000" + QID.Text + ".mib";
            else if (QID.Text.Length == 2)
                sfd.FileName = "questData_000" + QID.Text + ".mib";
            else if (QID.Text.Length == 3)
                sfd.FileName = "questData_00" + QID.Text + ".mib";
            else if (QID.Text.Length == 4)
                sfd.FileName = "questData_0" + QID.Text + ".mib";
            else if (QID.Text.Length > 4)
                sfd.FileName = "questData_" + QID.Text + ".mib";
            sfd.ShowDialog();
            if (sfd.FileName != "")
            {
                File.WriteAllBytes(sfd.FileName, data4);
            }
        }
        private void PlayerSpawnChanged(object sender, RoutedEventArgs e)
        {
           //if (PSpawn.SelectedIndex == 0)
           //    FSpawn.IsChecked = true;
           //else
           //    FSpawn.IsChecked = false;
        }
        private void FixedSpawn(object sender, RoutedEventArgs e)
        {
           // if (FSpawn.IsChecked == true)
           //     PSpawn.SelectedIndex = 0;
           // else if (PSpawn.SelectedIndex == 0)
           //     PSpawn.SelectedIndex = 1;
        }
        private void MultiO_Checked(object sender, RoutedEventArgs e)
        {
            if (MultiO.IsChecked == true)
                MObj2.IsEnabled = true;
            else if (MultiO.IsChecked == false)
                MObj2.IsEnabled = false;
        }
        private void MObjT1_Changed(object sender, RoutedEventArgs e)
        {
            MObjID1.Items.Clear();
            if (MObjT1.SelectedIndex == 2)
                for (int i = 0; i < Items.Length; i++)
                    MObjID1.Items.Add(Items[i]);
            else
                for (int i = 1; i < MonsterNames.Length; i++)
                    MObjID1.Items.Add(MonsterNames[i]);
            MObjID1.SelectedIndex = 0;
        }
        private void MObjT2_Changed(object sender, RoutedEventArgs e)
        {

            MObjID2.Items.Clear();
            if (MObjT2.SelectedIndex == 2)
                for (int i = 0; i < Items.Length; i++)
                    MObjID2.Items.Add(Items[i]);
            else
                for (int i = 1; i < MonsterNames.Length; i++)
                    MObjID2.Items.Add(MonsterNames[i]);
            MObjID2.SelectedIndex = 0;
        }
        private void SObjT1_Changed(object sender, RoutedEventArgs e)
        {
            SObjID1.Items.Clear();
            if (SObjT1.SelectedIndex == 2)
                for (int i = 0; i < Items.Length; i++)
                    SObjID1.Items.Add(Items[i]);
            else
                for (int i = 1; i < MonsterNames.Length; i++)
                    SObjID1.Items.Add(MonsterNames[i]);
            SObjID1.SelectedIndex = 0;
        }
        private void SObjT2_Changed(object sender, RoutedEventArgs e)
        {

            SObjID2.Items.Clear();
            if (SObjT2.SelectedIndex == 2)
                for (int i = 0; i < Items.Length; i++)
                    SObjID2.Items.Add(Items[i]);
            else
                for (int i = 1; i < MonsterNames.Length; i++)
                    SObjID2.Items.Add(MonsterNames[i]);
            SObjID2.SelectedIndex = 0;
        }
        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        private void About_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("This tool was made by Aradi147. " +
                "\nCredits go to Asterisk, Vuze, Zindea, NekotagaYuhatora, Material, hexhexhex, TITAN" +
                "\nJunkBunny, Fandirus, Mace ya face,Bedtime, kkkkyue,eliottbw, Miralis, Silvris, Dave uRrr and everyone that worked on" +
                "\ndocumenting the MIB file. I don't really even know half of them.");
        }
        private void Contact_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("To contact me and other modders, please vist \n https://discord.gg/gJwMdhK");
        }
        private void RankSelectionChanged (object sender, RoutedEventArgs e)
        {

            if (Rank.SelectedIndex == 2)
            {
                if (Stars.SelectedIndex < 11)
                    Stars.SelectedIndex = 11;
            }
            if (Stars.SelectedIndex > 10)
                if (HRReq.SelectedIndex < 22)
                HRReq.SelectedIndex = 22;
        }
        private void UnknownsChecked(object sender, RoutedEventArgs e)
        {
            UnkTab.IsEnabled = true;
        }
        private void UnkownsUnchecked(object sender, RoutedEventArgs e)
        {
            UnkTab.IsEnabled = false;
        }

        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e)
        {
            Regex regex = new Regex("[^0-9]+");
            e.Handled = regex.IsMatch(e.Text);
            
        }
        private void MaxValueInspection(object sender, RoutedEventArgs e)
        {
            TextBox[] UnknwonValues = { UnknownValue01, UnknownValue01, UnknownValue02, UnknownValue03,
                UnknownValue04, UnknownValue05, UnknownValue06, UnknownValue07, UnknownValue08, UnknownValue09,
                UnknownValue10, UnknownValue11, UnknownValue12, UnknownValue13, UnknownValue14, UnknownValue15,
                UnknownValue16, UnknownValue17, UnknownValue18, UnknownValue19, UnknownValue20, UnknownValue21,
                UnknownValue22, UnknownValue23, UnknownValue24, UnknownValue25, UnknownValue26 };
            for (int i = 0; i < 23; i++)
            {
                Inspectingint32 = Convert.ToUInt64(UnknwonValues[i].Text);
                if (Inspectingint32 > 4294967295)
                    UnknwonValues[i].Text = 4294967295.ToString();
            }
            for (int i = 23; i < 27; i++)
            {
                Inspectingbyte = Convert.ToInt16(UnknwonValues[i].Text);
                if (Inspectingbyte > 255)
                    UnknwonValues[i].Text = 255.ToString();
            }
        }

        private void Rank_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }
    }
}
